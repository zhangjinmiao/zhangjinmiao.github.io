<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="http://zhangjinmiao.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="http://zhangjinmiao.github.io/" rel="alternate" type="text/html" /><updated>2022-08-23T17:36:19+08:00</updated><id>http://zhangjinmiao.github.io/feed.xml</id><title type="html">山川尽美</title><subtitle>本站是山川尽美的技术分享驿站，内容涉及Java后端技术：JVM、Spring Boot、Spring Cloud、高并发、多线程、微服务、架构设计、中间件使用等技术知识；还包括日常生活感悟、理财知识等</subtitle><author><name>Zhang jinmiao</name></author><entry><title type="html">JVM 面试问题集锦</title><link href="http://zhangjinmiao.github.io/interview/2022/08/23/jvm.html" rel="alternate" type="text/html" title="JVM 面试问题集锦" /><published>2022-08-23T00:00:00+08:00</published><updated>2022-08-23T00:00:00+08:00</updated><id>http://zhangjinmiao.github.io/interview/2022/08/23/jvm</id><content type="html" xml:base="http://zhangjinmiao.github.io/interview/2022/08/23/jvm.html">&lt;h2 id=&quot;1-jvm-内存结构&quot;&gt;1. JVM 内存结构&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;要求&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;掌握 JVM 内存结构划分&lt;/li&gt;
  &lt;li&gt;尤其要知道方法区、永久代、元空间的关系&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;结合一段 java 代码的执行理解内存划分&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/jvm/image-20210831165728217.png&quot; alt=&quot;image-20210831165728217&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;执行 javac 命令编译源代码为字节码&lt;/li&gt;
  &lt;li&gt;执行 java 命令
    &lt;ol&gt;
      &lt;li&gt;创建 JVM，调用类加载子系统加载 class，将类的信息存入&lt;strong&gt;方法区&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;创建 main 线程，使用的内存区域是 &lt;strong&gt;JVM 虚拟机栈&lt;/strong&gt;，开始执行 main 方法代码&lt;/li&gt;
      &lt;li&gt;如果遇到了未见过的类，会继续触发类加载过程，同样会存入&lt;strong&gt;方法区&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;需要创建对象，会使用&lt;strong&gt;堆&lt;/strong&gt;内存来存储对象&lt;/li&gt;
      &lt;li&gt;不再使用的对象，会由&lt;strong&gt;垃圾回收器&lt;/strong&gt;在内存不足时回收其内存&lt;/li&gt;
      &lt;li&gt;调用方法时，方法内的局部变量、方法参数所使用的是  &lt;strong&gt;JVM 虚拟机栈&lt;/strong&gt;中的栈帧内存&lt;/li&gt;
      &lt;li&gt;调用方法时，先要到&lt;strong&gt;方法区&lt;/strong&gt;获得到该方法的字节码指令，由&lt;strong&gt;解释器&lt;/strong&gt;将字节码指令解释为机器码执行&lt;/li&gt;
      &lt;li&gt;调用方法时，会将要执行的指令行号读到&lt;strong&gt;程序计数器&lt;/strong&gt;，这样当发生了线程切换，恢复时就可以从中断的位置继续&lt;/li&gt;
      &lt;li&gt;对于非 java 实现的方法调用，使用内存称为&lt;strong&gt;本地方法栈&lt;/strong&gt;（见说明）&lt;/li&gt;
      &lt;li&gt;对于热点方法调用，或者频繁的循环代码，由 &lt;strong&gt;JIT 即时编译器&lt;/strong&gt;将这些代码编译成机器码缓存，提高执行性能&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;说明&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;加粗字体代表了 JVM 虚拟机组件&lt;/li&gt;
  &lt;li&gt;对于 Oracle 的 Hotspot 虚拟机实现，不区分虚拟机栈和本地方法栈&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;会发生内存溢出的区域&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;不会出现内存溢出的区域 – 程序计数器&lt;/li&gt;
  &lt;li&gt;出现 OutOfMemoryError 的情况
    &lt;ul&gt;
      &lt;li&gt;堆内存耗尽 – 对象越来越多，又一直在使用，不能被垃圾回收&lt;/li&gt;
      &lt;li&gt;方法区内存耗尽 – 加载的类越来越多，很多框架都会在运行期间动态产生新的类&lt;/li&gt;
      &lt;li&gt;虚拟机栈累积 – 每个线程最多会占用 1 M 内存，线程个数越来越多，而又长时间运行不销毁时&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;出现 StackOverflowError 的区域
    &lt;ul&gt;
      &lt;li&gt;JVM 虚拟机栈，原因有方法递归调用未正确结束、反序列化 json 时循环引用&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;方法区、永久代、元空间&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;方法区&lt;/strong&gt;是 JVM 规范中定义的一块内存区域，用来存储类元数据、方法字节码、即时编译器需要的信息等&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;永久代&lt;/strong&gt;是 Hotspot 虚拟机对 JVM 规范的实现（1.8 之前）&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;元空间&lt;/strong&gt;是 Hotspot 虚拟机对 JVM 规范的另一种实现（1.8 以后），使用本地内存作为这些信息的存储空间&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/jvm/image-20210831170457337.png&quot; alt=&quot;image-20210831170457337&quot; /&gt;&lt;/p&gt;

&lt;p&gt;从这张图学到三点&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;当第一次用到某个类是，由类加载器将 class 文件的类元信息读入，并存储于元空间&lt;/li&gt;
  &lt;li&gt;X，Y 的类元信息是存储于元空间中，无法直接访问&lt;/li&gt;
  &lt;li&gt;可以用 X.class，Y.class 间接访问类元信息，它们俩属于 java 对象，我们的代码中可以使用&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/jvm/image-20210831170512418.png&quot; alt=&quot;image-20210831170512418&quot; /&gt;&lt;/p&gt;

&lt;p&gt;从这张图可以学到&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;堆内存中：当一个&lt;strong&gt;类加载器对象&lt;/strong&gt;，这个类加载器对象加载的所有&lt;strong&gt;类对象&lt;/strong&gt;，这些类对象对应的所有&lt;strong&gt;实例对象&lt;/strong&gt;都没人引用时，GC 时就会对它们占用的对内存进行释放&lt;/li&gt;
  &lt;li&gt;元空间中：内存释放&lt;strong&gt;以类加载器为单位&lt;/strong&gt;，当堆中类加载器内存释放时，对应的元空间中的类元信息也会释放&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-jvm-内存参数&quot;&gt;2. JVM 内存参数&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;要求&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;熟悉常见的 JVM 参数，尤其和大小相关的&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;堆内存，按大小设置&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/jvm/image-20210831173130717.png&quot; alt=&quot;image-20210831173130717&quot; /&gt;&lt;/p&gt;

&lt;p&gt;解释：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;-Xms 最小堆内存（包括新生代和老年代）&lt;/li&gt;
  &lt;li&gt;-Xmx 最大对内存（包括新生代和老年代）&lt;/li&gt;
  &lt;li&gt;通常建议将 -Xms 与 -Xmx 设置为大小相等，即不需要保留内存，不需要从小到大增长，这样性能较好&lt;/li&gt;
  &lt;li&gt;-XX:NewSize 与 -XX:MaxNewSize 设置新生代的最小与最大值，但一般不建议设置，由 JVM 自己控制&lt;/li&gt;
  &lt;li&gt;-Xmn 设置新生代大小，相当于同时设置了 -XX:NewSize 与 -XX:MaxNewSize 并且取值相等&lt;/li&gt;
  &lt;li&gt;保留是指，一开始不会占用那么多内存，随着使用内存越来越多，会逐步使用这部分保留内存。下同&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;堆内存，按比例设置&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/jvm/image-20210831173045700.png&quot; alt=&quot;image-20210831173045700&quot; /&gt;&lt;/p&gt;

&lt;p&gt;解释：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;-XX:NewRatio=2:1 表示老年代占两份，新生代占一份&lt;/li&gt;
  &lt;li&gt;-XX:SurvivorRatio=4:1 表示新生代分成六份，伊甸园占四份，from 和 to 各占一份&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;元空间内存设置&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/jvm/image-20210831173118634.png&quot; alt=&quot;image-20210831173118634&quot; /&gt;&lt;/p&gt;

&lt;p&gt;解释：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;class space 存储类的基本信息，最大值受 -XX:CompressedClassSpaceSize 控制&lt;/li&gt;
  &lt;li&gt;non-class space 存储除类的基本信息以外的其它信息（如方法字节码、注解等）&lt;/li&gt;
  &lt;li&gt;class space 和 non-class space 总大小受 -XX:MaxMetaspaceSize 控制&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;注意：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;这里 -XX:CompressedClassSpaceSize 这段空间还与是否开启了指针压缩有关，这里暂不深入展开，可以简单认为指针压缩默认开启&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;代码缓存内存设置&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/jvm/image-20210831173148816.png&quot; alt=&quot;image-20210831173148816&quot; /&gt;&lt;/p&gt;

&lt;p&gt;解释：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果 -XX:ReservedCodeCacheSize &amp;lt; 240m，所有优化机器代码不加区分存在一起&lt;/li&gt;
  &lt;li&gt;否则，分成三个区域（图中笔误 mthod 拼写错误，少一个 e）
    &lt;ul&gt;
      &lt;li&gt;non-nmethods - JVM 自己用的代码&lt;/li&gt;
      &lt;li&gt;profiled nmethods - 部分优化的机器码&lt;/li&gt;
      &lt;li&gt;non-profiled nmethods - 完全优化的机器码&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;线程内存设置&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/jvm/image-20210831173155481.png&quot; alt=&quot;image-20210831173155481&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;em&gt;官方参考文档&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;https://docs.oracle.com/en/java/javase/11/tools/java.html#GUID-3B1CE181-CD30-4178-9602-230B800D4FAE&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;3-jvm-垃圾回收&quot;&gt;3. JVM 垃圾回收&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;要求&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;掌握垃圾回收算法&lt;/li&gt;
  &lt;li&gt;掌握分代回收思想&lt;/li&gt;
  &lt;li&gt;理解三色标记及漏标处理&lt;/li&gt;
  &lt;li&gt;了解常见垃圾回收器&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;三种垃圾回收算法&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;标记清除法&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/jvm/image-20210831211008162.png&quot; alt=&quot;image-20210831211008162&quot; /&gt;&lt;/p&gt;

&lt;p&gt;解释：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;找到 GC Root 对象，即那些一定不会被回收的对象，如正执行方法内局部变量引用的对象、静态变量引用的对象&lt;/li&gt;
  &lt;li&gt;标记阶段：沿着 GC Root 对象的引用链找，直接或间接引用到的对象加上标记&lt;/li&gt;
  &lt;li&gt;清除阶段：释放未加标记的对象占用的内存&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;要点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;标记速度与存活对象线性关系&lt;/li&gt;
  &lt;li&gt;清除速度与内存大小线性关系&lt;/li&gt;
  &lt;li&gt;缺点是会产生内存碎片&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;标记整理法&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/jvm/image-20210831211641241.png&quot; alt=&quot;image-20210831211641241&quot; /&gt;&lt;/p&gt;

&lt;p&gt;解释：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;前面的标记阶段、清理阶段与标记清除法类似&lt;/li&gt;
  &lt;li&gt;多了一步整理的动作，将存活对象向一端移动，可以避免内存碎片产生&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;特点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;标记速度与存活对象线性关系&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;清除与整理速度与内存大小成线性关系&lt;/li&gt;
  &lt;li&gt;缺点是性能上较慢&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;标记复制法&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/jvm/image-20210831212125813.png&quot; alt=&quot;image-20210831212125813&quot; /&gt;&lt;/p&gt;

&lt;p&gt;解释：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;将整个内存分成两个大小相等的区域，from 和 to，其中 to 总是处于空闲，from 存储新创建的对象&lt;/li&gt;
  &lt;li&gt;标记阶段与前面的算法类似&lt;/li&gt;
  &lt;li&gt;在找出存活对象后，会将它们从 from 复制到 to 区域，复制的过程中自然完成了碎片整理&lt;/li&gt;
  &lt;li&gt;复制完成后，交换 from 和 to 的位置即可&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;特点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;标记与复制速度与存活对象成线性关系&lt;/li&gt;
  &lt;li&gt;缺点是会占用成倍的空间&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;GC 与分代回收算法&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GC 的目的在于实现无用对象内存自动释放，减少内存碎片、加快分配速度&lt;/p&gt;

&lt;p&gt;GC 要点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;回收区域是&lt;strong&gt;堆内存&lt;/strong&gt;，不包括虚拟机栈&lt;/li&gt;
  &lt;li&gt;判断无用对象，使用&lt;strong&gt;可达性分析算法&lt;/strong&gt;，&lt;strong&gt;三色标记法&lt;/strong&gt;标记存活对象，回收未标记对象&lt;/li&gt;
  &lt;li&gt;GC 具体的实现称为&lt;strong&gt;垃圾回收器&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;GC 大都采用了&lt;strong&gt;分代回收思想&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;理论依据是大部分对象朝生夕灭，用完立刻就可以回收，另有少部分对象会长时间存活，每次很难回收&lt;/li&gt;
      &lt;li&gt;根据这两类对象的特性将回收区域分为&lt;strong&gt;新生代&lt;/strong&gt;和&lt;strong&gt;老年代&lt;/strong&gt;，新生代采用标记复制法、老年代一般采用标记整理法&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;根据 GC 的规模可以分成 &lt;strong&gt;Minor GC&lt;/strong&gt;，&lt;strong&gt;Mixed GC&lt;/strong&gt;，&lt;strong&gt;Full GC&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;分代回收&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;伊甸园 eden，最初对象都分配到这里，与幸存区 survivor（分成 from 和 to）合称新生代，&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/jvm/image-20210831213622704.png&quot; alt=&quot;image-20210831213622704&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;当伊甸园内存不足，标记伊甸园与 from（现阶段没有）的存活对象&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/jvm/image-20210831213640110.png&quot; alt=&quot;image-20210831213640110&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;将存活对象采用复制算法复制到 to 中，复制完毕后，伊甸园和 from 内存都得到释放&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/jvm/image-20210831213657861.png&quot; alt=&quot;image-20210831213657861&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;将 from 和 to 交换位置&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/jvm/image-20210831213708776.png&quot; alt=&quot;image-20210831213708776&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;经过一段时间后伊甸园的内存又出现不足&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/jvm/image-20210831213724858.png&quot; alt=&quot;image-20210831213724858&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;标记伊甸园与 from（现阶段没有）的存活对象&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/jvm/image-20210831213737669.png&quot; alt=&quot;image-20210831213737669&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;将存活对象采用复制算法复制到 to 中&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/jvm/image-20210831213804315.png&quot; alt=&quot;image-20210831213804315&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;复制完毕后，伊甸园和 from 内存都得到释放&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/jvm/image-20210831213815371.png&quot; alt=&quot;image-20210831213815371&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;将 from 和 to 交换位置&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/jvm/image-20210831213826017.png&quot; alt=&quot;image-20210831213826017&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;老年代 old，当幸存区对象熬过几次回收（最多15次），晋升到老年代（幸存区内存不足或大对象会导致提前晋升）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;GC 规模&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Minor GC 发生在新生代的垃圾回收，暂停时间短&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Mixed GC 新生代 + 老年代部分区域的垃圾回收，G1 收集器特有&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Full GC 新生代 + 老年代完整垃圾回收，暂停时间长，&lt;strong&gt;应尽力避免&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;三色标记&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;即用三种颜色记录对象的标记状态&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;黑色 – 已标记&lt;/li&gt;
  &lt;li&gt;灰色 – 标记中&lt;/li&gt;
  &lt;li&gt;白色 – 还未标记&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;起始的三个对象还未处理完成，用灰色表示&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/jvm/image-20210831215016566.png&quot; alt=&quot;image-20210831215016566&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;该对象的引用已经处理完成，用黑色表示，黑色引用的对象变为灰色&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/jvm/image-20210831215033510.png&quot; alt=&quot;image-20210831215033510&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;依次类推&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/jvm/image-20210831215105280.png&quot; alt=&quot;image-20210831215105280&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;沿着引用链都标记了一遍&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/jvm/image-20210831215146276.png&quot; alt=&quot;image-20210831215146276&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;最后为标记的白色对象，即为垃圾&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/jvm/image-20210831215158311.png&quot; alt=&quot;image-20210831215158311&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;并发漏标问题&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;比较先进的垃圾回收器都支持&lt;strong&gt;并发标记&lt;/strong&gt;，即在标记过程中，用户线程仍然能工作。但这样带来一个新的问题，如果用户线程修改了对象引用，那么就存在漏标问题。例如：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;如图所示标记工作尚未完成&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/jvm/image-20210831215846876.png&quot; alt=&quot;image-20210831215846876&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;用户线程同时在工作，断开了第一层 3、4 两个对象之间的引用，这时对于正在处理 3 号对象的垃圾回收线程来讲，它会将 4 号对象当做是白色垃圾&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/jvm/image-20210831215904073.png&quot; alt=&quot;image-20210831215904073&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;但如果其他用户线程又建立了 2、4 两个对象的引用，这时因为 2 号对象是黑色已处理对象了，因此垃圾回收线程不会察觉到这个引用关系的变化，从而产生了漏标&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/jvm/image-20210831215919493.png&quot; alt=&quot;image-20210831215919493&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;如果用户线程让黑色对象引用了一个新增对象，一样会存在漏标问题&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/jvm/image-20210831220004062.png&quot; alt=&quot;image-20210831220004062&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;因此对于&lt;strong&gt;并发标记&lt;/strong&gt;而言，必须解决漏标问题，也就是要记录标记过程中的变化。有两种解决方法：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Incremental Update 增量更新法，CMS 垃圾回收器采用
    &lt;ul&gt;
      &lt;li&gt;思路是拦截每次赋值动作，只要赋值发生，被赋值的对象就会被记录下来，在重新标记阶段再确认一遍&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Snapshot At The Beginning，SATB 原始快照法，G1 垃圾回收器采用
    &lt;ul&gt;
      &lt;li&gt;思路也是拦截每次赋值动作，不过记录的对象不同，也需要在重新标记阶段对这些对象二次处理&lt;/li&gt;
      &lt;li&gt;新加对象会被记录&lt;/li&gt;
      &lt;li&gt;被删除引用关系的对象也被记录&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;垃圾回收器 - Parallel GC&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;eden 内存不足发生 Minor GC，采用标记复制算法，需要暂停用户线程&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;old 内存不足发生 Full GC，采用标记整理算法，需要暂停用户线程&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;注重吞吐量&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;垃圾回收器 - ConcurrentMarkSweep GC&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;它是工作在 old 老年代，支持&lt;strong&gt;并发标记&lt;/strong&gt;的一款回收器，采用&lt;strong&gt;并发清除&lt;/strong&gt;算法
    &lt;ul&gt;
      &lt;li&gt;并发标记时不需暂停用户线程&lt;/li&gt;
      &lt;li&gt;重新标记时仍需暂停用户线程&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果并发失败（即回收速度赶不上创建新对象速度），会触发 Full GC&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;注重响应时间&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;垃圾回收器 - G1 GC&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;响应时间与吞吐量兼顾&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;划分成多个区域，每个区域都可以充当 eden，survivor，old， humongous，其中 humongous 专为大对象准备&lt;/li&gt;
  &lt;li&gt;分成三个阶段：新生代回收、并发标记、混合收集&lt;/li&gt;
  &lt;li&gt;如果并发失败（即回收速度赶不上创建新对象速度），会触发 Full GC&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;G1 回收阶段 - 新生代回收&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;初始时，所有区域都处于空闲状态&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/jvm/image-20210831222639754.png&quot; alt=&quot;image-20210831222639754&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;创建了一些对象，挑出一些空闲区域作为伊甸园区存储这些对象&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/jvm/image-20210831222653802.png&quot; alt=&quot;image-20210831222653802&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;当伊甸园需要垃圾回收时，挑出一个空闲区域作为幸存区，用复制算法复制存活对象，需要暂停用户线程&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/jvm/image-20210831222705814.png&quot; alt=&quot;image-20210831222705814&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;复制完成，将之前的伊甸园内存释放&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/jvm/image-20210831222724999.png&quot; alt=&quot;image-20210831222724999&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;随着时间流逝，伊甸园的内存又有不足&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/jvm/image-20210831222737928.png&quot; alt=&quot;image-20210831222737928&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;将伊甸园以及之前幸存区中的存活对象，采用复制算法，复制到新的幸存区，其中较老对象晋升至老年代&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/jvm/image-20210831222752787.png&quot; alt=&quot;image-20210831222752787&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;释放伊甸园以及之前幸存区的内存&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/jvm/image-20210831222803281.png&quot; alt=&quot;image-20210831222803281&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;G1 回收阶段 - 并发标记与混合收集&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;当老年代占用内存超过阈值后，触发并发标记，这时无需暂停用户线程&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/jvm/image-20210831222813959.png&quot; alt=&quot;image-20210831222813959&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;并发标记之后，会有重新标记阶段解决漏标问题，此时需要暂停用户线程。这些都完成后就知道了老年代有哪些存活对象，随后进入混合收集阶段。此时不会对所有老年代区域进行回收，而是根据&lt;strong&gt;暂停时间目标&lt;/strong&gt;优先回收价值高（存活对象少）的区域（这也是 Gabage First 名称的由来）。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/jvm/image-20210831222828104.png&quot; alt=&quot;image-20210831222828104&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;混合收集阶段中，参与复制的有 eden、survivor、old，下图显示了伊甸园和幸存区的存活对象复制&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/jvm/image-20210831222841096.png&quot; alt=&quot;image-20210831222841096&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;下图显示了老年代和幸存区晋升的存活对象的复制&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/jvm/image-20210831222859760.png&quot; alt=&quot;image-20210831222859760&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;复制完成，内存得到释放。进入下一轮的新生代回收、并发标记、混合收集&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/jvm/image-20210831222919182.png&quot; alt=&quot;image-20210831222919182&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;4-内存溢出&quot;&gt;4. 内存溢出&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;要求&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;能够说出几种典型的导致内存溢出的情况&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;典型情况&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;误用线程池导致的内存溢出
    &lt;ul&gt;
      &lt;li&gt;参考 day03.TestOomThreadPool&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;查询数据量太大导致的内存溢出
    &lt;ul&gt;
      &lt;li&gt;参考 day03.TestOomTooManyObject&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;动态生成类导致的内存溢出
    &lt;ul&gt;
      &lt;li&gt;参考 day03.TestOomTooManyClass&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;5-类加载&quot;&gt;5. 类加载&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;要求&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;掌握类加载阶段&lt;/li&gt;
  &lt;li&gt;掌握类加载器&lt;/li&gt;
  &lt;li&gt;理解双亲委派机制&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;类加载过程的三个阶段&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;加载&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;将类的字节码载入方法区，并创建类.class 对象&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;如果此类的父类没有加载，先加载父类&lt;/li&gt;
      &lt;li&gt;加载是懒惰执行&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;链接
    &lt;ol&gt;
      &lt;li&gt;验证 – 验证类是否符合 Class 规范，合法性、安全性检查&lt;/li&gt;
      &lt;li&gt;准备 – 为 static 变量分配空间，设置默认值&lt;/li&gt;
      &lt;li&gt;解析 – 将常量池的符号引用解析为直接引用&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;初始化
    &lt;ol&gt;
      &lt;li&gt;静态代码块、static 修饰的变量赋值、static final 修饰的引用类型变量赋值，会被合并成一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;cinit&amp;gt;&lt;/code&gt; 方法，在初始化时被调用&lt;/li&gt;
      &lt;li&gt;static final 修饰的基本类型变量赋值，在链接阶段就已完成&lt;/li&gt;
      &lt;li&gt;初始化是懒惰执行&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;em&gt;验证手段&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;使用 jps 查看进程号&lt;/li&gt;
    &lt;li&gt;使用 jhsdb 调试，执行命令 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jhsdb.exe hsdb&lt;/code&gt; 打开它的图形界面
      &lt;ul&gt;
        &lt;li&gt;Class Browser 可以查看当前 jvm 中加载了哪些类&lt;/li&gt;
        &lt;li&gt;控制台的 universe 命令查看堆内存范围&lt;/li&gt;
        &lt;li&gt;控制台的 g1regiondetails 命令查看 region 详情&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scanoops 起始地址 结束地址 对象类型&lt;/code&gt; 可以根据类型查找某个区间内的对象地址&lt;/li&gt;
        &lt;li&gt;控制台的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inspect 地址&lt;/code&gt; 指令能够查看这个地址对应的对象详情&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;使用 javap 命令可以查看 class 字节码&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;em&gt;代码说明&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;day03.loader.TestLazy - 验证类的加载是懒惰的，用到时才触发类加载&lt;/li&gt;
    &lt;li&gt;day03.loader.TestFinal - 验证使用 final 修饰的变量不会触发类加载&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;jdk 8 的类加载器&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;名称&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;加载哪的类&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Bootstrap ClassLoader&lt;/td&gt;
      &lt;td&gt;JAVA_HOME/jre/lib&lt;/td&gt;
      &lt;td&gt;无法直接访问&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Extension ClassLoader&lt;/td&gt;
      &lt;td&gt;JAVA_HOME/jre/lib/ext&lt;/td&gt;
      &lt;td&gt;上级为 Bootstrap，显示为  null&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Application ClassLoader&lt;/td&gt;
      &lt;td&gt;classpath&lt;/td&gt;
      &lt;td&gt;上级为 Extension&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;自定义类加载器&lt;/td&gt;
      &lt;td&gt;自定义&lt;/td&gt;
      &lt;td&gt;上级为 Application&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;双亲委派机制&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;所谓的双亲委派，就是指优先委派上级类加载器进行加载，如果上级类加载器&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;能找到这个类，由上级加载，加载后该类也对下级加载器可见&lt;/li&gt;
  &lt;li&gt;找不到这个类，则下级类加载器才有资格执行加载&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;双亲委派的目的有两点&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;让上级类加载器中的类对下级共享（反之不行），即能让你的类能依赖到 jdk 提供的核心类&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;让类的加载有优先次序，保证核心类优先加载&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;对双亲委派的误解&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;下面面试题的回答是错误的&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/jvm/image-20210901110910016.png&quot; alt=&quot;image-20210901110910016&quot; /&gt;&lt;/p&gt;

&lt;p&gt;错在哪了？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;自己编写类加载器就能加载一个假冒的 java.lang.System 吗? 答案是不行。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;假设你自己的类加载器用双亲委派，那么优先由启动类加载器加载真正的 java.lang.System，自然不会加载假冒的&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;假设你自己的类加载器不用双亲委派，那么你的类加载器加载假冒的 java.lang.System 时，它需要先加载父类 java.lang.Object，而你没有用委派，找不到 java.lang.Object 所以加载会失败&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;以上也仅仅是假设&lt;/strong&gt;。事实上操作你就会发现，自定义类加载器加载以 java. 打头的类时，会抛安全异常，在 jdk9 以上版本这些特殊包名都与模块进行了绑定，更连编译都过不了&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;em&gt;代码说明&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;day03.loader.TestJdk9ClassLoader - 演示类加载器与模块的绑定关系&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;6-四种引用&quot;&gt;6. 四种引用&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;要求&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;掌握四种引用&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;强引用&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;普通变量赋值即为强引用，如 A a = new A();&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;通过 GC Root 的引用链，如果强引用不到该对象，该对象才能被回收&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/jvm/image-20210901111903574.png&quot; alt=&quot;image-20210901111903574&quot; style=&quot;zoom:80%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;软引用（SoftReference）&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;例如：SoftReference a = new SoftReference(new A());&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果仅有软引用该对象时，首次垃圾回收不会回收该对象，如果内存仍不足，再次回收时才会释放对象&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;软引用自身需要配合引用队列来释放&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;典型例子是反射数据&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/jvm/image-20210901111957328.png&quot; alt=&quot;image-20210901111957328&quot; style=&quot;zoom:80%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;弱引用（WeakReference）&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;例如：WeakReference a = new WeakReference(new A());&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果仅有弱引用引用该对象时，只要发生垃圾回收，就会释放该对象&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;弱引用自身需要配合引用队列来释放&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;典型例子是 ThreadLocalMap 中的 Entry 对象&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/jvm/image-20210901112107707.png&quot; alt=&quot;image-20210901112107707&quot; style=&quot;zoom:80%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;虚引用（PhantomReference）&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;例如： PhantomReference a = new PhantomReference(new A(), referenceQueue);&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;必须配合引用队列一起使用，当虚引用所引用的对象被回收时，由 Reference Handler 线程将虚引用对象入队，这样就可以知道哪些对象被回收，从而对它们关联的资源做进一步处理&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;典型例子是 Cleaner 释放 DirectByteBuffer 关联的直接内存&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/jvm/image-20210901112157901.png&quot; alt=&quot;image-20210901112157901&quot; style=&quot;zoom:80%;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;em&gt;代码说明&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;day03.reference.TestPhantomReference - 演示虚引用的基本用法&lt;/li&gt;
    &lt;li&gt;day03.reference.TestWeakReference - 模拟 ThreadLocalMap, 采用引用队列释放 entry 内存&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;7-finalize&quot;&gt;7. finalize&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;要求&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;掌握 finalize 的工作原理与缺点&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;finalize&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;它是 Object 中的一个方法，如果子类重写它，垃圾回收时此方法会被调用，可以在其中进行资源释放和清理工作&lt;/li&gt;
  &lt;li&gt;将资源释放和清理放在 finalize 方法中非常不好，非常影响性能，严重时甚至会引起 OOM，从 Java9 开始就被标注为 @Deprecated，不建议被使用了&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;finalize 原理&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;对 finalize 方法进行处理的核心逻辑位于 java.lang.ref.Finalizer 类中，它包含了名为 unfinalized 的静态变量（双向链表结构），Finalizer 也可被视为另一种引用对象（地位与软、弱、虚相当，只是不对外，无法直接使用）&lt;/li&gt;
  &lt;li&gt;当重写了 finalize 方法的对象，在构造方法调用之时，JVM 都会将其包装成一个 Finalizer 对象，并加入 unfinalized 链表中&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/jvm/image-20210901121032813.png&quot; alt=&quot;image-20210901121032813&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Finalizer 类中还有另一个重要的静态变量，即 ReferenceQueue 引用队列，刚开始它是空的。当狗对象可以被当作垃圾回收时，就会把这些狗对象对应的 Finalizer 对象加入此引用队列&lt;/li&gt;
  &lt;li&gt;但此时 Dog 对象还没法被立刻回收，因为 unfinalized -&amp;gt; Finalizer 这一引用链还在引用它嘛，为的是【先别着急回收啊，等我调完 finalize 方法，再回收】&lt;/li&gt;
  &lt;li&gt;FinalizerThread 线程会从 ReferenceQueue 中逐一取出每个 Finalizer 对象，把它们从链表断开并真正调用 finallize 方法&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/jvm/image-20210901122228916.png&quot; alt=&quot;image-20210901122228916&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;由于整个 Finalizer 对象已经从 unfinalized 链表中断开，这样没谁能引用到它和狗对象，所以下次 gc 时就被回收了&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;finalize 缺点&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;无法保证资源释放：FinalizerThread 是守护线程，代码很有可能没来得及执行完，线程就结束了&lt;/li&gt;
  &lt;li&gt;无法判断是否发生错误：执行 finalize 方法时，会吞掉任意异常（Throwable）&lt;/li&gt;
  &lt;li&gt;内存释放不及时：重写了 finalize 方法的对象在第一次被 gc 时，并不能及时释放它占用的内存，因为要等着 FinalizerThread 调用完 finalize，把它从 unfinalized 队列移除后，第二次 gc 时才能真正释放内存&lt;/li&gt;
  &lt;li&gt;有的文章提到【Finalizer 线程会和我们的主线程进行竞争，不过由于它的优先级较低，获取到的CPU时间较少，因此它永远也赶不上主线程的步伐】这个显然是错误的，FinalizerThread 的优先级较普通线程更高，原因应该是 finalize 串行执行慢等原因综合导致&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;em&gt;代码说明&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;day03.reference.TestFinalize - finalize 的测试代码&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;</content><author><name>Zhang jinmiao</name></author><category term="Interview" /><summary type="html">1. JVM 内存结构</summary></entry><entry><title type="html">Spring Boot 面试问题集锦</title><link href="http://zhangjinmiao.github.io/interview/2022/08/22/spring-boot.html" rel="alternate" type="text/html" title="Spring Boot 面试问题集锦" /><published>2022-08-22T00:00:00+08:00</published><updated>2022-08-22T00:00:00+08:00</updated><id>http://zhangjinmiao.github.io/interview/2022/08/22/spring%20boot</id><content type="html" xml:base="http://zhangjinmiao.github.io/interview/2022/08/22/spring-boot.html">&lt;h2 id=&quot;1-springboot-自动配置原理&quot;&gt;1. SpringBoot 自动配置原理&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;要求&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;掌握 SpringBoot 自动配置原理&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;自动配置原理&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;@SpringBootConfiguration 是一个组合注解，由 @ComponentScan、@EnableAutoConfiguration 和 @SpringBootConfiguration 组成&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;@SpringBootConfiguration 与普通 @Configuration 相比，唯一区别是前者要求整个 app 中只出现一次&lt;/li&gt;
  &lt;li&gt;@ComponentScan
    &lt;ul&gt;
      &lt;li&gt;excludeFilters - 用来在组件扫描时进行排除，也会排除自动配置类&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;@EnableAutoConfiguration 也是一个组合注解，由下面注解组成
    &lt;ul&gt;
      &lt;li&gt;@AutoConfigurationPackage – 用来记住扫描的起始包&lt;/li&gt;
      &lt;li&gt;@Import(AutoConfigurationImportSelector.class) 用来加载 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;META-INF/spring.factories&lt;/code&gt; 中的自动配置类&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;为什么不使用 @Import 直接引入自动配置类&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;有两个原因：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;让主配置类和自动配置类变成了强耦合，主配置类不应该知道有哪些从属配置&lt;/li&gt;
  &lt;li&gt;直接用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Import(自动配置类.class)&lt;/code&gt;，引入的配置解析优先级较高，自动配置类的解析应该在主配置没提供时作为默认配置&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;因此，采用了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Import(AutoConfigurationImportSelector.class)&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;由 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AutoConfigurationImportSelector.class&lt;/code&gt; 去读取 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;META-INF/spring.factories&lt;/code&gt; 中的自动配置类，实现了弱耦合。&lt;/li&gt;
  &lt;li&gt;另外 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AutoConfigurationImportSelector.class&lt;/code&gt; 实现了 DeferredImportSelector 接口，让自动配置的解析晚于主配置的解析&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Zhang jinmiao</name></author><category term="Interview" /><summary type="html">1. SpringBoot 自动配置原理</summary></entry><entry><title type="html">Spring 面试问题集锦</title><link href="http://zhangjinmiao.github.io/interview/2022/08/21/spring.html" rel="alternate" type="text/html" title="Spring 面试问题集锦" /><published>2022-08-21T00:00:00+08:00</published><updated>2022-08-21T00:00:00+08:00</updated><id>http://zhangjinmiao.github.io/interview/2022/08/21/spring</id><content type="html" xml:base="http://zhangjinmiao.github.io/interview/2022/08/21/spring.html">&lt;h2 id=&quot;1-spring-refresh-流程&quot;&gt;1. Spring refresh 流程&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;要求&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;掌握 refresh 的 12 个步骤&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Spring refresh 概述&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;refresh 是 AbstractApplicationContext 中的一个方法，负责初始化 ApplicationContext 容器，容器必须调用 refresh 才能正常工作。它的内部主要会调用 12 个方法，我们把它们称为 refresh 的 12 个步骤：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;prepareRefresh&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;obtainFreshBeanFactory&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;prepareBeanFactory&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;postProcessBeanFactory&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;invokeBeanFactoryPostProcessors&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;registerBeanPostProcessors&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;initMessageSource&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;initApplicationEventMulticaster&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;onRefresh&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;registerListeners&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;finishBeanFactoryInitialization&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;finishRefresh&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;em&gt;功能分类&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;
      &lt;p&gt;1 为准备环境&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;2 3 4 5 6 为准备 BeanFactory&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;7 8 9 10 12 为准备 ApplicationContext&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;11 为初始化 BeanFactory 中非延迟单例 bean&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;1. prepareRefresh&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;这一步创建和准备了 Environment 对象，它作为 ApplicationContext 的一个成员变量&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Environment 对象的作用之一是为后续 @Value，值注入时提供键值&lt;/li&gt;
  &lt;li&gt;Environment 分成三个主要部分
    &lt;ul&gt;
      &lt;li&gt;systemProperties - 保存 java 环境键值&lt;/li&gt;
      &lt;li&gt;systemEnvironment - 保存系统环境键值&lt;/li&gt;
      &lt;li&gt;自定义 PropertySource - 保存自定义键值，例如来自于 *.properties 文件的键值&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/spring/image-20210902181639048.png&quot; alt=&quot;image-20210902181639048&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. obtainFreshBeanFactory&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;这一步获取（或创建） BeanFactory，它也是作为 ApplicationContext 的一个成员变量&lt;/li&gt;
  &lt;li&gt;BeanFactory 的作用是负责 bean 的创建、依赖注入和初始化，bean 的各项特征由 BeanDefinition 定义
    &lt;ul&gt;
      &lt;li&gt;BeanDefinition 作为 bean 的设计蓝图，规定了 bean 的特征，如单例多例、依赖关系、初始销毁方法等&lt;/li&gt;
      &lt;li&gt;BeanDefinition 的来源有多种多样，可以是通过 xml 获得、配置类获得、组件扫描获得，也可以是编程添加&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;所有的 BeanDefinition 会存入 BeanFactory 中的 beanDefinitionMap 集合&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/spring/image-20210902182004819.png&quot; alt=&quot;image-20210902182004819&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. prepareBeanFactory&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;这一步会进一步完善 BeanFactory，为它的各项成员变量赋值&lt;/li&gt;
  &lt;li&gt;beanExpressionResolver 用来解析 SpEL，常见实现为 StandardBeanExpressionResolver&lt;/li&gt;
  &lt;li&gt;propertyEditorRegistrars 会注册类型转换器
    &lt;ul&gt;
      &lt;li&gt;它在这里使用了 ResourceEditorRegistrar 实现类&lt;/li&gt;
      &lt;li&gt;并应用 ApplicationContext 提供的 Environment 完成 ${ } 解析&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;registerResolvableDependency 来注册 beanFactory 以及 ApplicationContext，让它们也能用于依赖注入&lt;/li&gt;
  &lt;li&gt;beanPostProcessors 是 bean 后处理器集合，会工作在 bean 的生命周期各个阶段，此处会添加两个：
    &lt;ul&gt;
      &lt;li&gt;ApplicationContextAwareProcessor 用来解析 Aware 接口&lt;/li&gt;
      &lt;li&gt;ApplicationListenerDetector 用来识别容器中 ApplicationListener 类型的 bean&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/spring/image-20210902182541925.png&quot; alt=&quot;image-20210902182541925&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. postProcessBeanFactory&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;这一步是空实现，留给子类扩展。
    &lt;ul&gt;
      &lt;li&gt;一般 Web 环境的 ApplicationContext 都要利用它注册新的 Scope，完善 Web 下的 BeanFactory&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;这里体现的是模板方法设计模式&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;5. invokeBeanFactoryPostProcessors&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;这一步会调用 beanFactory 后处理器&lt;/li&gt;
  &lt;li&gt;beanFactory 后处理器，充当 beanFactory 的扩展点，可以用来补充或修改 BeanDefinition&lt;/li&gt;
  &lt;li&gt;常见的 beanFactory 后处理器有
    &lt;ul&gt;
      &lt;li&gt;ConfigurationClassPostProcessor – 解析 @Configuration、@Bean、@Import、@PropertySource 等&lt;/li&gt;
      &lt;li&gt;PropertySourcesPlaceHolderConfigurer – 替换 BeanDefinition 中的 ${ }&lt;/li&gt;
      &lt;li&gt;MapperScannerConfigurer – 补充 Mapper 接口对应的 BeanDefinition&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/spring/image-20210902183232114.png&quot; alt=&quot;image-20210902183232114&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. registerBeanPostProcessors&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;这一步是继续从 beanFactory 中找出 bean 后处理器，添加至 beanPostProcessors 集合中&lt;/li&gt;
  &lt;li&gt;bean 后处理器，充当 bean 的扩展点，可以工作在 bean 的实例化、依赖注入、初始化阶段，常见的有：
    &lt;ul&gt;
      &lt;li&gt;AutowiredAnnotationBeanPostProcessor 功能有：解析 @Autowired，@Value 注解&lt;/li&gt;
      &lt;li&gt;CommonAnnotationBeanPostProcessor 功能有：解析 @Resource，@PostConstruct，@PreDestroy&lt;/li&gt;
      &lt;li&gt;AnnotationAwareAspectJAutoProxyCreator 功能有：为符合切点的目标 bean 自动创建代理&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/spring/image-20210902183520307.png&quot; alt=&quot;image-20210902183520307&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. initMessageSource&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;这一步是为 ApplicationContext 添加 messageSource 成员，实现国际化功能&lt;/li&gt;
  &lt;li&gt;去 beanFactory 内找名为 messageSource 的 bean，如果没有，则提供空的 MessageSource 实现&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/spring/image-20210902183819984.png&quot; alt=&quot;image-20210902183819984&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. initApplicationContextEventMulticaster&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;这一步为 ApplicationContext 添加事件广播器成员，即 applicationContextEventMulticaster&lt;/li&gt;
  &lt;li&gt;它的作用是发布事件给监听器&lt;/li&gt;
  &lt;li&gt;去 beanFactory 找名为 applicationEventMulticaster 的 bean 作为事件广播器，若没有，会创建默认的事件广播器&lt;/li&gt;
  &lt;li&gt;之后就可以调用 ApplicationContext.publishEvent(事件对象) 来发布事件&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/spring/image-20210902183943469.png&quot; alt=&quot;image-20210902183943469&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. onRefresh&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;这一步是空实现，留给子类扩展
    &lt;ul&gt;
      &lt;li&gt;SpringBoot 中的子类在这里准备了 WebServer，即内嵌 web 容器&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;体现的是模板方法设计模式&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;10. registerListeners&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;这一步会从多种途径找到事件监听器，并添加至 applicationEventMulticaster&lt;/li&gt;
  &lt;li&gt;事件监听器顾名思义，用来接收事件广播器发布的事件，有如下来源
    &lt;ul&gt;
      &lt;li&gt;事先编程添加的&lt;/li&gt;
      &lt;li&gt;来自容器中的 bean&lt;/li&gt;
      &lt;li&gt;来自于 @EventListener 的解析&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;要实现事件监听器，只需要实现 ApplicationListener 接口，重写其中 onApplicationEvent(E e) 方法即可&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/spring/image-20210902184343872.png&quot; alt=&quot;image-20210902184343872&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;11. finishBeanFactoryInitialization&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;这一步会将 beanFactory 的成员补充完毕，并初始化所有非延迟单例 bean&lt;/li&gt;
  &lt;li&gt;conversionService 也是一套转换机制，作为对 PropertyEditor 的补充&lt;/li&gt;
  &lt;li&gt;embeddedValueResolvers 即内嵌值解析器，用来解析 @Value 中的 ${ }，借用的是 Environment 的功能&lt;/li&gt;
  &lt;li&gt;singletonObjects 即单例池，缓存所有单例对象
    &lt;ul&gt;
      &lt;li&gt;对象的创建都分三个阶段，每一阶段都有不同的 bean 后处理器参与进来，扩展功能&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/spring/image-20210902184641623.png&quot; alt=&quot;image-20210902184641623&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;12. finishRefresh&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;这一步会为 ApplicationContext 添加 lifecycleProcessor 成员，用来控制容器内需要生命周期管理的 bean&lt;/li&gt;
  &lt;li&gt;如果容器中有名称为 lifecycleProcessor 的 bean 就用它，否则创建默认的生命周期管理器&lt;/li&gt;
  &lt;li&gt;准备好生命周期管理器，就可以实现
    &lt;ul&gt;
      &lt;li&gt;调用 context 的 start，即可触发所有实现 LifeCycle 接口 bean 的 start&lt;/li&gt;
      &lt;li&gt;调用 context 的 stop，即可触发所有实现 LifeCycle 接口 bean 的 stop&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;发布 ContextRefreshed 事件，整个 refresh 执行完成&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/spring/image-20210902185052433.png&quot; alt=&quot;image-20210902185052433&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-spring-bean-生命周期&quot;&gt;2. Spring bean 生命周期&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;要求&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;掌握 Spring bean 的生命周期&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;bean 生命周期 概述&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;bean 的生命周期从调用 beanFactory 的 getBean 开始，到这个 bean 被销毁，可以总结为以下七个阶段：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;处理名称，检查缓存&lt;/li&gt;
  &lt;li&gt;处理父子容器&lt;/li&gt;
  &lt;li&gt;处理 dependsOn&lt;/li&gt;
  &lt;li&gt;选择 scope 策略&lt;/li&gt;
  &lt;li&gt;创建 bean&lt;/li&gt;
  &lt;li&gt;类型转换处理&lt;/li&gt;
  &lt;li&gt;销毁 bean&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;em&gt;注意&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;划分的阶段和名称并不重要，重要的是理解整个过程中做了哪些事情&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;1. 处理名称，检查缓存&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;这一步会处理别名，将别名解析为实际名称&lt;/li&gt;
  &lt;li&gt;对 FactoryBean 也会特殊处理，如果以 &amp;amp; 开头表示要获取 FactoryBean 本身，否则表示要获取其产品&lt;/li&gt;
  &lt;li&gt;这里针对单例对象会检查一级、二级、三级缓存
    &lt;ul&gt;
      &lt;li&gt;singletonFactories 三级缓存，存放单例工厂对象&lt;/li&gt;
      &lt;li&gt;earlySingletonObjects 二级缓存，存放单例工厂的产品对象
        &lt;ul&gt;
          &lt;li&gt;如果发生循环依赖，产品是代理；无循环依赖，产品是原始对象&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;singletonObjects 一级缓存，存放单例成品对象&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;2. 处理父子容器&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果当前容器根据名字找不到这个 bean，此时若父容器存在，则执行父容器的 getBean 流程&lt;/li&gt;
  &lt;li&gt;父子容器的 bean 名称可以重复&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;3. 处理 dependsOn&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果当前 bean 有通过 dependsOn 指定了非显式依赖的 bean，这一步会提前创建这些 dependsOn 的 bean&lt;/li&gt;
  &lt;li&gt;所谓非显式依赖，就是指两个 bean 之间不存在直接依赖关系，但需要控制它们的创建先后顺序&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;4. 选择 scope 策略&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;对于 singleton scope，首先到单例池去获取 bean，如果有则直接返回，没有再进入创建流程&lt;/li&gt;
  &lt;li&gt;对于 prototype scope，每次都会进入创建流程&lt;/li&gt;
  &lt;li&gt;对于自定义 scope，例如 request，首先到 request 域获取 bean，如果有则直接返回，没有再进入创建流程&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;5.1 创建 bean - 创建 bean 实例&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;要点&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;有自定义 TargetSource 的情况&lt;/td&gt;
      &lt;td&gt;由 AnnotationAwareAspectJAutoProxyCreator 创建代理返回&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Supplier 方式创建 bean 实例&lt;/td&gt;
      &lt;td&gt;为 Spring 5.0 新增功能，方便编程方式创建  bean  实例&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;FactoryMethod 方式  创建 bean  实例&lt;/td&gt;
      &lt;td&gt;① 分成静态工厂与实例工厂；② 工厂方法若有参数，需要对工厂方法参数进行解析，利用  resolveDependency；③ 如果有多个工厂方法候选者，还要进一步按权重筛选&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;AutowiredAnnotationBeanPostProcessor&lt;/td&gt;
      &lt;td&gt;① 优先选择带  @Autowired  注解的构造；② 若有唯一的带参构造，也会入选&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;mbd.getPreferredConstructors&lt;/td&gt;
      &lt;td&gt;选择所有公共构造，这些构造之间按权重筛选&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;采用默认构造&lt;/td&gt;
      &lt;td&gt;如果上面的后处理器和 BeanDefiniation 都没找到构造，采用默认构造，即使是私有的&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;5.2 创建 bean - 依赖注入&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;要点&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;AutowiredAnnotationBeanPostProcessor&lt;/td&gt;
      &lt;td&gt;识别   @Autowired  及 @Value  标注的成员，封装为  InjectionMetadata 进行依赖注入&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;CommonAnnotationBeanPostProcessor&lt;/td&gt;
      &lt;td&gt;识别   @Resource  标注的成员，封装为  InjectionMetadata 进行依赖注入&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;resolveDependency&lt;/td&gt;
      &lt;td&gt;用来查找要装配的值，可以识别：① Optional；② ObjectFactory 及 ObjectProvider；③ @Lazy  注解；④ @Value  注解（${  }, #{ }, 类型转换）；⑤ 集合类型（Collection，Map，数组等）；⑥ 泛型和  @Qualifier（用来区分类型歧义）；⑦ primary  及名字匹配（用来区分类型歧义）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;AUTOWIRE_BY_NAME&lt;/td&gt;
      &lt;td&gt;根据成员名字找 bean 对象，修改 mbd 的 propertyValues，不会考虑简单类型的成员&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;AUTOWIRE_BY_TYPE&lt;/td&gt;
      &lt;td&gt;根据成员类型执行 resolveDependency 找到依赖注入的值，修改  mbd 的 propertyValues&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;applyPropertyValues&lt;/td&gt;
      &lt;td&gt;根据 mbd 的 propertyValues 进行依赖注入（即xml中 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;property name ref|value/&amp;gt;&lt;/code&gt;）&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;5.3 创建 bean - 初始化&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;要点&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;内置 Aware 接口的装配&lt;/td&gt;
      &lt;td&gt;包括 BeanNameAware，BeanFactoryAware 等&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;扩展 Aware 接口的装配&lt;/td&gt;
      &lt;td&gt;由 ApplicationContextAwareProcessor 解析，执行时机在  postProcessBeforeInitialization&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;@PostConstruct&lt;/td&gt;
      &lt;td&gt;由 CommonAnnotationBeanPostProcessor 解析，执行时机在  postProcessBeforeInitialization&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;InitializingBean&lt;/td&gt;
      &lt;td&gt;通过接口回调执行初始化&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;initMethod&lt;/td&gt;
      &lt;td&gt;根据 BeanDefinition 得到的初始化方法执行初始化，即 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;bean init-method&amp;gt;&lt;/code&gt; 或 @Bean(initMethod)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;创建 aop 代理&lt;/td&gt;
      &lt;td&gt;由 AnnotationAwareAspectJAutoProxyCreator 创建，执行时机在  postProcessAfterInitialization&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;5.4 创建 bean - 注册可销毁 bean&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在这一步判断并登记可销毁 bean&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;判断依据
    &lt;ul&gt;
      &lt;li&gt;如果实现了 DisposableBean 或 AutoCloseable 接口，则为可销毁 bean&lt;/li&gt;
      &lt;li&gt;如果自定义了 destroyMethod，则为可销毁 bean&lt;/li&gt;
      &lt;li&gt;如果采用 @Bean 没有指定 destroyMethod，则采用自动推断方式获取销毁方法名（close，shutdown）&lt;/li&gt;
      &lt;li&gt;如果有 @PreDestroy 标注的方法&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;存储位置
    &lt;ul&gt;
      &lt;li&gt;singleton scope 的可销毁 bean 会存储于 beanFactory 的成员当中&lt;/li&gt;
      &lt;li&gt;自定义 scope 的可销毁 bean 会存储于对应的域对象当中&lt;/li&gt;
      &lt;li&gt;prototype scope 不会存储，需要自己找到此对象销毁&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;存储时都会封装为 DisposableBeanAdapter 类型对销毁方法的调用进行适配&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;6. 类型转换处理&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果 getBean 的 requiredType 参数与实际得到的对象类型不同，会尝试进行类型转换&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;7. 销毁 bean&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;销毁时机
    &lt;ul&gt;
      &lt;li&gt;singleton bean 的销毁在 ApplicationContext.close 时，此时会找到所有 DisposableBean 的名字，逐一销毁&lt;/li&gt;
      &lt;li&gt;自定义 scope bean 的销毁在作用域对象生命周期结束时&lt;/li&gt;
      &lt;li&gt;prototype bean 的销毁可以通过自己手动调用 AutowireCapableBeanFactory.destroyBean 方法执行销毁&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;同一 bean 中不同形式销毁方法的调用次序
    &lt;ul&gt;
      &lt;li&gt;优先后处理器销毁，即 @PreDestroy&lt;/li&gt;
      &lt;li&gt;其次 DisposableBean 接口销毁&lt;/li&gt;
      &lt;li&gt;最后 destroyMethod 销毁（包括自定义名称，推断名称，AutoCloseable 接口 多选一）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3-spring-bean-循环依赖&quot;&gt;3. Spring bean 循环依赖&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;要求&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;掌握单例 set 方式循环依赖的原理&lt;/li&gt;
  &lt;li&gt;掌握其它循环依赖的解决方法&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;循环依赖的产生&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;首先要明白，bean 的创建要遵循一定的步骤，必须是创建、注入、初始化三步，这些顺序不能乱&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/spring/image-20210903085238916.png&quot; alt=&quot;image-20210903085238916&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;set 方法（包括成员变量）的循环依赖如图所示&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;可以在【a 创建】和【a set 注入 b】之间加入 b 的整个流程来解决&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;【b set 注入 a】 时可以成功，因为之前 a 的实例已经创建完毕&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;a 的顺序，及 b 的顺序都能得到保障&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/spring/image-20210903085454603.png&quot; alt=&quot;image-20210903085454603&quot; style=&quot;zoom: 33%;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;构造方法的循环依赖如图所示，显然无法用前面的方法解决&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/spring/image-20210903085906315.png&quot; alt=&quot;image-20210903085906315&quot; style=&quot;zoom: 50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;构造循环依赖的解决&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;思路1
    &lt;ul&gt;
      &lt;li&gt;a 注入 b 的代理对象，这样能够保证 a 的流程走通&lt;/li&gt;
      &lt;li&gt;后续需要用到 b 的真实对象时，可以通过代理间接访问&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/spring/image-20210903091627659.png&quot; alt=&quot;image-20210903091627659&quot; style=&quot;zoom: 50%;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;思路2
    &lt;ul&gt;
      &lt;li&gt;a 注入 b 的工厂对象，让 b 的实例创建被推迟，这样能够保证 a 的流程先走通&lt;/li&gt;
      &lt;li&gt;后续需要用到 b 的真实对象时，再通过 ObjectFactory 工厂间接访问&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/spring/image-20210903091743366.png&quot; alt=&quot;image-20210903091743366&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;示例1：用 @Lazy 为构造方法参数生成代理&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;App60_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Lazy&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A(B b) {}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@PostConstruct&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;init()&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;B({})&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@PostConstruct&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;init()&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;GenericApplicationContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GenericApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;registerBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;registerBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;AnnotationConfigUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;registerAnnotationConfigProcessors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDefaultListableBeanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;refresh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;示例2：用 ObjectProvider 延迟依赖对象的创建&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;App60_2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ObjectProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ObjectProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A({})&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@PostConstruct&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;init()&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;B({})&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@PostConstruct&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;init()&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;GenericApplicationContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GenericApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;registerBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;registerBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;AnnotationConfigUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;registerAnnotationConfigProcessors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDefaultListableBeanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;refresh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;示例3：用 @Scope 产生代理&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;App60_3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;GenericApplicationContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GenericApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;ClassPathBeanDefinitionScanner&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scanner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ClassPathBeanDefinitionScanner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDefaultListableBeanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;scanner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;scan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.itheima.app60.sub&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;refresh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A(B b) {}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@PostConstruct&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;init()&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proxyMode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ScopedProxyMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TARGET_CLASS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;B({})&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@PostConstruct&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;init()&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;示例4：用 Provider 接口解决，原理上与 ObjectProvider 一样，Provider 接口是独立的 jar 包，需要加入依赖&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;javax.inject&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;javax.inject&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;App60_4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Provider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Provider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A({}})&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@PostConstruct&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;init()&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;B({}})&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@PostConstruct&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;init()&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;GenericApplicationContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GenericApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;registerBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;registerBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;AnnotationConfigUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;registerAnnotationConfigProcessors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDefaultListableBeanFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;refresh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;解决-set-循环依赖的原理&quot;&gt;解决 set 循环依赖的原理&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;一级缓存&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/spring/image-20210903100752165.png&quot; alt=&quot;image-20210903100752165&quot; style=&quot;zoom:80%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;作用是保证单例对象仅被创建一次&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;第一次走 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getBean(&quot;a&quot;)&lt;/code&gt; 流程后，最后会将成品 a 放入 singletonObjects 一级缓存&lt;/li&gt;
  &lt;li&gt;后续再走 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getBean(&quot;a&quot;)&lt;/code&gt; 流程时，先从一级缓存中找，这时已经有成品 a，就无需再次创建&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;一级缓存与循环依赖&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/spring/image-20210903100914140.png&quot; alt=&quot;image-20210903100914140&quot; style=&quot;zoom:80%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;一级缓存无法解决循环依赖问题，分析如下&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;无论是获取 bean a 还是获取 bean b，走的方法都是同一个 getBean 方法，假设先走 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getBean(&quot;a&quot;)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;当 a 的实例对象创建，接下来执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a.setB()&lt;/code&gt; 时，需要走 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getBean(&quot;b&quot;)&lt;/code&gt; 流程，红色箭头 1&lt;/li&gt;
  &lt;li&gt;当 b 的实例对象创建，接下来执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b.setA()&lt;/code&gt; 时，又回到了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getBean(&quot;a&quot;)&lt;/code&gt; 的流程，红色箭头 2&lt;/li&gt;
  &lt;li&gt;但此时 singletonObjects 一级缓存内没有成品的 a，陷入了死循环&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;二级缓存&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/spring/image-20210903101849924.png&quot; alt=&quot;image-20210903101849924&quot; style=&quot;zoom:80%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;解决思路如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;再增加一个 singletonFactories 缓存&lt;/li&gt;
  &lt;li&gt;在依赖注入前，即 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a.setB()&lt;/code&gt; 以及 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b.setA()&lt;/code&gt; 将 a 及 b 的半成品对象（未完成依赖注入和初始化）放入此缓存&lt;/li&gt;
  &lt;li&gt;执行依赖注入时，先看看 singletonFactories 缓存中是否有半成品的对象，如果有拿来注入，顺利走完流程&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对于上面的图&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a = new A()&lt;/code&gt; 执行之后就会把这个半成品的 a 放入 singletonFactories 缓存，即 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;factories.put(a)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;接下来执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a.setB()&lt;/code&gt;，走入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getBean(&quot;b&quot;)&lt;/code&gt; 流程，红色箭头 3&lt;/li&gt;
  &lt;li&gt;这回再执行到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b.setA()&lt;/code&gt; 时，需要一个 a 对象，有没有呢？有！&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;factories.get()&lt;/code&gt; 在 singletonFactories  缓存中就可以找到，红色箭头 4 和 5&lt;/li&gt;
  &lt;li&gt;b 的流程能够顺利走完，将 b 成品放入 singletonObject 一级缓存，返回到 a 的依赖注入流程，红色箭头 6&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;二级缓存与创建代理&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/spring/image-20210903103030877.png&quot; alt=&quot;image-20210903103030877&quot; style=&quot;zoom:80%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;二级缓存无法正确处理循环依赖并且包含有代理创建的场景，分析如下&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;spring 默认要求，在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a.init&lt;/code&gt; 完成之后才能创建代理 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pa = proxy(a)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;由于 a 的代理创建时机靠后，在执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;factories.put(a)&lt;/code&gt; 向 singletonFactories 中放入的还是原始对象&lt;/li&gt;
  &lt;li&gt;接下来箭头 3、4、5 这几步 b 对象拿到和注入的都是原始对象&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;三级缓存&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/spring/image-20210903103628639.png&quot; alt=&quot;image-20210903103628639&quot; /&gt;&lt;/p&gt;

&lt;p&gt;简单分析的话，只需要将代理的创建时机放在依赖注入之前即可，但 spring 仍然希望代理的创建时机在 init 之后，只有出现循环依赖时，才会将代理的创建时机提前。所以解决思路稍显复杂：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;图中 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;factories.put(fa)&lt;/code&gt; 放入的既不是原始对象，也不是代理对象而是工厂对象 fa&lt;/li&gt;
  &lt;li&gt;当检查出发生循环依赖时，fa 的产品就是代理 pa，没有发生循环依赖，fa 的产品是原始对象 a&lt;/li&gt;
  &lt;li&gt;假设出现了循环依赖，拿到了 singletonFactories 中的工厂对象，通过在依赖注入前获得了 pa，红色箭头 5&lt;/li&gt;
  &lt;li&gt;这回 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b.setA()&lt;/code&gt; 注入的就是代理对象，保证了正确性，红色箭头 7&lt;/li&gt;
  &lt;li&gt;还需要把 pa 存入新加的 earlySingletonObjects 缓存，红色箭头 6&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a.init&lt;/code&gt; 完成后，无需二次创建代理，从哪儿找到 pa 呢？earlySingletonObjects 已经缓存，蓝色箭头 9&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当成品对象产生，放入 singletonObject 后，singletonFactories 和 earlySingletonObjects 就中的对象就没有用处，清除即可&lt;/p&gt;

&lt;h2 id=&quot;4-spring-事务失效&quot;&gt;4. Spring 事务失效&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;要求&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;掌握事务失效的八种场景&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;1. 抛出检查异常导致事务不能正确回滚&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Service1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AccountMapper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accountMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;transfer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FileNotFoundException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fromBalance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accountMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findBalanceBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fromBalance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;accountMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FileInputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;aaa&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;accountMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;原因：Spring 默认只会回滚非检查异常&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;解法：配置 rollbackFor 属性&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Transactional(rollbackFor = Exception.class)&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;2. 业务方法内自己 try-catch 异常导致事务不能正确回滚&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Service2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AccountMapper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accountMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rollbackFor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;transfer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fromBalance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accountMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findBalanceBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fromBalance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;accountMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FileInputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;aaa&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;accountMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FileNotFoundException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;原因：事务通知只有捉到了目标抛出的异常，才能进行后续的回滚处理，如果目标自己处理掉异常，事务通知无法知悉&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;解法1：异常原样抛出
    &lt;ul&gt;
      &lt;li&gt;在 catch 块添加 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;throw new RuntimeException(e);&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;解法2：手动设置 TransactionStatus.setRollbackOnly()
    &lt;ul&gt;
      &lt;li&gt;在 catch 块添加 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TransactionInterceptor.currentTransactionStatus().setRollbackOnly();&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;3. aop 切面顺序导致导致事务不能正确回滚&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Service3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AccountMapper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accountMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rollbackFor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;transfer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FileNotFoundException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fromBalance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accountMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findBalanceBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fromBalance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;accountMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FileInputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;aaa&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;accountMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Aspect&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyAspect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Around&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;execution(* transfer(..))&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;around&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ProceedingJoinPoint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pjp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;LoggerUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;log:{}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pjp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTarget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pjp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;proceed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;原因：事务切面优先级最低，但如果自定义的切面优先级和他一样，则还是自定义切面在内层，这时若自定义切面没有正确抛出异常…&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;解法1、2：同情况2 中的解法:1、2&lt;/li&gt;
  &lt;li&gt;解法3：调整切面顺序，在 MyAspect 上添加 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@Order(Ordered.LOWEST_PRECEDENCE - 1)&lt;/code&gt; （不推荐）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;4. 非 public 方法导致的事务失效&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Service4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AccountMapper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accountMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;transfer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FileNotFoundException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fromBalance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accountMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findBalanceBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fromBalance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;accountMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;accountMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;原因：Spring 为方法创建代理、添加事务通知、前提条件都是该方法是 public 的&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;解法1：改为 public 方法&lt;/li&gt;
  &lt;li&gt;解法2：添加 bean 配置如下（不推荐）&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TransactionAttributeSource&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;transactionAttributeSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AnnotationTransactionAttributeSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;5. 父子容器导致的事务失效&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;day04.tx.app.service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Service5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AccountMapper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accountMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rollbackFor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;transfer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FileNotFoundException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fromBalance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accountMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findBalanceBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fromBalance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;accountMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;accountMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;控制器类&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;day04.tx.app.controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Controller&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AccountController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Service5&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;transfer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FileNotFoundException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;transfer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;App 配置类&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ComponentScan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;day04.tx.app.service&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@EnableTransactionManagement&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AppConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ... 有事务相关配置&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Web 配置类&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ComponentScan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;day04.tx.app&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WebConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ... 无事务配置&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;现在配置了父子容器，WebConfig 对应子容器，AppConfig 对应父容器，发现事务依然失效&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;原因：子容器扫描范围过大，把未加事务配置的 service 扫描进来&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;解法1：各扫描各的，不要图简便&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;解法2：不要用父子容器，所有 bean 放在同一容器&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;6. 调用本类方法导致传播行为失效&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Service6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;propagation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Propagation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;REQUIRED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rollbackFor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FileNotFoundException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;LoggerUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;propagation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Propagation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;REQUIRES_NEW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rollbackFor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FileNotFoundException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;LoggerUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;原因：本类方法调用不经过代理，因此无法增强&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;解法1：依赖注入自己（代理）来调用&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;解法2：通过 AopContext 拿到代理对象，来调用&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;解法3：通过 CTW，LTW 实现功能增强&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;解法1&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Service6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Service6&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 本质上是一种循环依赖&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;propagation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Propagation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;REQUIRED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rollbackFor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FileNotFoundException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;LoggerUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;proxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;propagation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Propagation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;REQUIRES_NEW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rollbackFor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FileNotFoundException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;LoggerUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;解法2，还需要在 AppConfig 上添加 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@EnableAspectJAutoProxy(exposeProxy = true)&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Service6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;propagation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Propagation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;REQUIRED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rollbackFor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FileNotFoundException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;LoggerUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Service6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AopContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentProxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;propagation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Propagation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;REQUIRES_NEW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rollbackFor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FileNotFoundException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;LoggerUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;7. @Transactional 没有保证原子行为&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Service7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Service7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AccountMapper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accountMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rollbackFor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;transfer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fromBalance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accountMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findBalanceBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;更新前查询余额为: {}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fromBalance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fromBalance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;accountMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;accountMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findBalance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accountNo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accountMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findBalanceBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accountNo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面的代码实际上是有 bug 的，假设 from 余额为 1000，两个线程都来转账 1000，可能会出现扣减为负数的情况&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;原因：事务的原子性仅涵盖 insert、update、delete、select … for update 语句，select 方法并不阻塞&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/spring/image-20210903120436365.png&quot; alt=&quot;image-20210903120436365&quot; style=&quot;zoom: 50%;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如上图所示，红色线程和蓝色线程的查询都发生在扣减之前，都以为自己有足够的余额做扣减&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;8. @Transactional 方法导致的 synchronized 失效&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;针对上面的问题，能否在方法上加 synchronized 锁来解决呢？&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Service7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Service7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AccountMapper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accountMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rollbackFor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;transfer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fromBalance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accountMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findBalanceBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;更新前查询余额为: {}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fromBalance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fromBalance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;accountMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;accountMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findBalance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accountNo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accountMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findBalanceBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accountNo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;答案是不行，原因如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;synchronized 保证的仅是目标方法的原子性，环绕目标方法的还有 commit 等操作，它们并未处于 sync 块内&lt;/li&gt;
  &lt;li&gt;可以参考下图发现，蓝色线程的查询只要在红色线程提交之前执行，那么依然会查询到有 1000 足够余额来转账&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/spring/image-20210903120800185.png&quot; alt=&quot;image-20210903120800185&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;解法1：synchronized 范围应扩大至代理方法调用&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;解法2：使用 select … for update 替换 select&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;5-spring-mvc-执行流程&quot;&gt;5. Spring MVC 执行流程&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;要求&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;掌握 Spring MVC 的执行流程&lt;/li&gt;
  &lt;li&gt;了解 Spring MVC 的重要组件的作用&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;概要&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我把整个流程分成三个阶段&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;准备阶段&lt;/li&gt;
  &lt;li&gt;匹配阶段&lt;/li&gt;
  &lt;li&gt;执行阶段&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;准备阶段&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;在 Web 容器第一次用到 DispatcherServlet 的时候，会创建其对象并执行 init 方法&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;init 方法内会创建 Spring Web 容器，并调用容器 refresh 方法&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;refresh 过程中会创建并初始化 SpringMVC 中的重要组件， 例如 MultipartResolver，HandlerMapping，HandlerAdapter，HandlerExceptionResolver、ViewResolver 等&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;容器初始化后，会将上一步初始化好的重要组件，赋值给 DispatcherServlet 的成员变量，留待后用&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/spring/image-20210903140657163.png&quot; alt=&quot;image-20210903140657163&quot; style=&quot;zoom: 80%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;匹配阶段&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;用户发送的请求统一到达前端控制器 DispatcherServlet&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DispatcherServlet 遍历所有 HandlerMapping ，找到与路径匹配的处理器&lt;/p&gt;

    &lt;p&gt;① HandlerMapping 有多个，每个 HandlerMapping 会返回不同的处理器对象，谁先匹配，返回谁的处理器。其中能识别 @RequestMapping 的优先级最高&lt;/p&gt;

    &lt;p&gt;② 对应 @RequestMapping 的处理器是 HandlerMethod，它包含了控制器对象和控制器方法信息&lt;/p&gt;

    &lt;p&gt;③ 其中路径与处理器的映射关系在 HandlerMapping 初始化时就会建立好&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/spring/image-20210903141017502.png&quot; alt=&quot;image-20210903141017502&quot; style=&quot;zoom:80%;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;将 HandlerMethod 连同匹配到的拦截器，生成调用链对象 HandlerExecutionChain 返回&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/spring/image-20210903141124911.png&quot; alt=&quot;image-20210903141124911&quot; style=&quot;zoom:80%;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;遍历HandlerAdapter 处理器适配器，找到能处理 HandlerMethod 的适配器对象，开始调用&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/spring/image-20210903141204799.png&quot; alt=&quot;image-20210903141204799&quot; style=&quot;zoom:80%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;调用阶段&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;执行拦截器 preHandle&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/spring/image-20210903141445870.png&quot; alt=&quot;image-20210903141445870&quot; style=&quot;zoom: 67%;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;由 HandlerAdapter 调用 HandlerMethod&lt;/p&gt;

    &lt;p&gt;① 调用前处理不同类型的参数&lt;/p&gt;

    &lt;p&gt;② 调用后处理不同类型的返回值&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/spring/image-20210903141658199.png&quot; alt=&quot;image-20210903141658199&quot; style=&quot;zoom:67%;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;第 2 步没有异常&lt;/p&gt;

    &lt;p&gt;① 返回 ModelAndView&lt;/p&gt;

    &lt;p&gt;② 执行拦截器 postHandle 方法&lt;/p&gt;

    &lt;p&gt;③ 解析视图，得到 View 对象，进行视图渲染&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/spring/image-20210903141749830.png&quot; alt=&quot;image-20210903141749830&quot; style=&quot;zoom:67%;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;第 2 步有异常，进入 HandlerExceptionResolver 异常处理流程&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/spring/image-20210903141844185.png&quot; alt=&quot;image-20210903141844185&quot; style=&quot;zoom:67%;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;最后都会执行拦截器的 afterCompletion 方法&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果控制器方法标注了 @ResponseBody 注解，则在第 2 步，就会生成 json 结果，并标记 ModelAndView 已处理，这样就不会执行第 3 步的视图渲染&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;6-spring-注解&quot;&gt;6. Spring 注解&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;要求&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;掌握 Spring 常见注解&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;em&gt;提示&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;注解的详细列表请参考：面试题-spring-注解.xmind&lt;/li&gt;
    &lt;li&gt;下面列出了视频中重点提及的注解，考虑到大部分注解同学们已经比较熟悉了，仅对个别的作简要说明&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;事务注解&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;@EnableTransactionManagement，会额外加载 4 个 bean
    &lt;ul&gt;
      &lt;li&gt;BeanFactoryTransactionAttributeSourceAdvisor 事务切面类&lt;/li&gt;
      &lt;li&gt;TransactionAttributeSource 用来解析事务属性&lt;/li&gt;
      &lt;li&gt;TransactionInterceptor 事务拦截器&lt;/li&gt;
      &lt;li&gt;TransactionalEventListenerFactory 事务监听器工厂&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;@Transactional&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;核心&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;@Order&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;切面&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;@EnableAspectJAutoProxy
    &lt;ul&gt;
      &lt;li&gt;会加载 AnnotationAwareAspectJAutoProxyCreator，它是一个 bean 后处理器，用来创建代理&lt;/li&gt;
      &lt;li&gt;如果没有配置 @EnableAspectJAutoProxy，又需要用到代理（如事务）则会使用 InfrastructureAdvisorAutoProxyCreator 这个 bean 后处理器&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;组件扫描与配置类&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;@Component&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;@Controller&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;@Service&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;@Repository&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;@ComponentScan&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;@Conditional&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;@Configuration&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;配置类其实相当于一个工厂, 标注 @Bean 注解的方法相当于工厂方法&lt;/li&gt;
      &lt;li&gt;@Bean 不支持方法重载, 如果有多个重载方法, 仅有一个能入选为工厂方法&lt;/li&gt;
      &lt;li&gt;@Configuration 默认会为标注的类生成代理, 其目的是保证 @Bean 方法相互调用时, 仍然能保证其单例特性&lt;/li&gt;
      &lt;li&gt;@Configuration 中如果含有 BeanFactory 后处理器, 则实例工厂方法会导致 MyConfig 提前创建, 造成其依赖注入失败，解决方法是改用静态工厂方法或直接为 @Bean 的方法参数依赖注入, 针对 Mapper 扫描可以改用注解方式&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;@Bean&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;@Import&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;四种用法&lt;/p&gt;

        &lt;p&gt;① 引入单个 bean&lt;/p&gt;

        &lt;p&gt;② 引入一个配置类&lt;/p&gt;

        &lt;p&gt;③ 通过 Selector 引入多个类&lt;/p&gt;

        &lt;p&gt;④ 通过 beanDefinition 注册器&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;解析规则&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;同一配置类中, @Import 先解析  @Bean 后解析&lt;/li&gt;
          &lt;li&gt;同名定义, 默认后面解析的会覆盖前面解析的&lt;/li&gt;
          &lt;li&gt;不允许覆盖的情况下, 如何能够让 MyConfig(主配置类) 的配置优先? (虽然覆盖方式能解决)&lt;/li&gt;
          &lt;li&gt;采用 DeferredImportSelector，因为它最后工作, 可以简单认为先解析 @Bean, 再 Import&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;@Lazy&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;加在类上，表示此类延迟实例化、初始化&lt;/li&gt;
      &lt;li&gt;加在方法参数上，此参数会以代理方式注入&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;@PropertySource&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;依赖注入&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;@Autowired&lt;/li&gt;
  &lt;li&gt;@Qualifier&lt;/li&gt;
  &lt;li&gt;@Value&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;mvc mapping&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;@RequestMapping，可以派生多个注解如 @GetMapping 等&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;mvc rest&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;@RequestBody&lt;/li&gt;
  &lt;li&gt;@ResponseBody，组合 @Controller =&amp;gt;  @RestController&lt;/li&gt;
  &lt;li&gt;@ResponseStatus&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;mvc 统一处理&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;@ControllerAdvice，组合 @ResponseBody =&amp;gt; @RestControllerAdvice&lt;/li&gt;
  &lt;li&gt;@ExceptionHandler&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;mvc 参数&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;@PathVariable&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;mvc ajax&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;@CrossOrigin&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;boot auto&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;@SpringBootApplication&lt;/li&gt;
  &lt;li&gt;@EnableAutoConfiguration&lt;/li&gt;
  &lt;li&gt;@SpringBootConfiguration&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;boot condition&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;@ConditionalOnClass，classpath 下存在某个 class 时，条件才成立&lt;/li&gt;
  &lt;li&gt;@ConditionalOnMissingBean，beanFactory 内不存在某个 bean 时，条件才成立&lt;/li&gt;
  &lt;li&gt;@ConditionalOnProperty，配置文件中存在某个 property（键、值）时，条件才成立&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;boot properties&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;@ConfigurationProperties，会将当前 bean 的属性与配置文件中的键值进行绑定&lt;/li&gt;
  &lt;li&gt;@EnableConfigurationProperties，会添加两个较为重要的 bean
    &lt;ul&gt;
      &lt;li&gt;ConfigurationPropertiesBindingPostProcessor，bean 后处理器，在 bean 初始化前调用下面的 binder&lt;/li&gt;
      &lt;li&gt;ConfigurationPropertiesBinder，真正执行绑定操作&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;7-spring-中的设计模式&quot;&gt;7. Spring 中的设计模式&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;要求&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;掌握 Spring 中常见的设计模式&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;1. Spring 中的 Singleton&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;请大家区分 singleton pattern 与 Spring 中的 singleton bean&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;根据单例模式的目的 &lt;em&gt;Ensure a class only has one instance, and provide a global point of access to it&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;显然 Spring 中的 singleton bean 并非实现了单例模式，singleton bean 只能保证每个容器内，相同 id 的 bean 单实例&lt;/li&gt;
  &lt;li&gt;当然 Spring 中也用到了单例模式，例如
    &lt;ul&gt;
      &lt;li&gt;org.springframework.transaction.TransactionDefinition#withDefaults&lt;/li&gt;
      &lt;li&gt;org.springframework.aop.TruePointcut#INSTANCE&lt;/li&gt;
      &lt;li&gt;org.springframework.aop.interceptor.ExposeInvocationInterceptor#ADVISOR&lt;/li&gt;
      &lt;li&gt;org.springframework.core.annotation.AnnotationAwareOrderComparator#INSTANCE&lt;/li&gt;
      &lt;li&gt;org.springframework.core.OrderComparator#INSTANCE&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;2. Spring 中的 Builder&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;定义 &lt;em&gt;Separate the construction of a complex object from its representation so that the same construction process can create different representations&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;它的主要亮点有三处：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;较为灵活的构建产品对象&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在不执行最后 build 方法前，产品对象都不可用&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;构建过程采用链式调用，看起来比较爽&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Spring 中体现 Builder 模式的地方：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;org.springframework.beans.factory.support.BeanDefinitionBuilder&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;org.springframework.web.util.UriComponentsBuilder&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;org.springframework.http.ResponseEntity.HeadersBuilder&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;org.springframework.http.ResponseEntity.BodyBuilder&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;3. Spring 中的 Factory Method&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;定义 &lt;em&gt;Define an interface for creating an object, but let subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;根据上面的定义，Spring 中的 ApplicationContext 与 BeanFactory 中的 getBean 都可以视为工厂方法，它隐藏了 bean （产品）的创建过程和具体实现&lt;/p&gt;

&lt;p&gt;Spring 中其它工厂：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;org.springframework.beans.factory.FactoryBean&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;@Bean 标注的静态方法及实例方法&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ObjectFactory 及 ObjectProvider&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;前两种工厂主要封装第三方的 bean 的创建过程，后两种工厂可以推迟 bean 创建，解决循环依赖及单例注入多例等问题&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Spring 中的 Adapter&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;定义 &lt;em&gt;Convert the interface of a class into another interface clients expect. Adapter lets classes work together that couldn’t otherwise because of incompatible interfaces&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;典型的实现有两处：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;org.springframework.web.servlet.HandlerAdapter – 因为控制器实现有各种各样，比如有
    &lt;ul&gt;
      &lt;li&gt;大家熟悉的 @RequestMapping 标注的控制器实现&lt;/li&gt;
      &lt;li&gt;传统的基于 Controller 接口（不是 @Controller注解啊）的实现&lt;/li&gt;
      &lt;li&gt;较新的基于 RouterFunction 接口的实现&lt;/li&gt;
      &lt;li&gt;它们的处理方法都不一样，为了统一调用，必须适配为 HandlerAdapter 接口&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;org.springframework.beans.factory.support.DisposableBeanAdapter – 因为销毁方法多种多样，因此都要适配为 DisposableBean 来统一调用销毁方法&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;5. Spring 中的 Composite&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;定义 &lt;em&gt;Compose objects into tree structures to represent part-whole hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;典型实现有：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;org.springframework.web.method.support.HandlerMethodArgumentResolverComposite&lt;/li&gt;
  &lt;li&gt;org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite&lt;/li&gt;
  &lt;li&gt;org.springframework.web.servlet.handler.HandlerExceptionResolverComposite&lt;/li&gt;
  &lt;li&gt;org.springframework.web.servlet.view.ViewResolverComposite&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;composite 对象的作用是，将分散的调用集中起来，统一调用入口，它的特征是，与具体干活的实现实现同一个接口，当调用 composite 对象的接口方法时，其实是委托具体干活的实现来完成&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. Spring 中的 Decorator&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;定义 &lt;em&gt;Attach additional responsibilities to an object dynamically. Decorators provide a flexible alternative to subclassing for extending functionality&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;典型实现：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;org.springframework.web.util.ContentCachingRequestWrapper&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;7. Spring 中的 Proxy&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;定义 &lt;em&gt;Provide a surrogate or placeholder for another object to control access to it&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;装饰器模式注重的是功能增强，避免子类继承方式进行功能扩展，而代理模式更注重控制目标的访问&lt;/p&gt;

&lt;p&gt;典型实现：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;org.springframework.aop.framework.JdkDynamicAopProxy&lt;/li&gt;
  &lt;li&gt;org.springframework.aop.framework.ObjenesisCglibAopProxy&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;8. Spring 中的 Chain of Responsibility&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;定义 &lt;em&gt;Avoid coupling the sender of a request to its receiver by giving more than one object a chance to handle the request. Chain the receiving objects and pass the request along the chain until an object handles it&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;典型实现：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;org.springframework.web.servlet.HandlerInterceptor&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;9. Spring 中的 Observer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;定义 &lt;em&gt;Define a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;典型实现：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;org.springframework.context.ApplicationListener&lt;/li&gt;
  &lt;li&gt;org.springframework.context.event.ApplicationEventMulticaster&lt;/li&gt;
  &lt;li&gt;org.springframework.context.ApplicationEvent&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;10. Spring 中的 Strategy&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;定义 &lt;em&gt;Define a family of algorithms, encapsulate each one, and make them interchangeable. Strategy lets the algorithm vary independently from clients that use it&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;典型实现：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;org.springframework.beans.factory.support.InstantiationStrategy&lt;/li&gt;
  &lt;li&gt;org.springframework.core.annotation.MergedAnnotations.SearchStrategy&lt;/li&gt;
  &lt;li&gt;org.springframework.boot.autoconfigure.condition.SearchStrategy&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;11. Spring 中的 Template Method&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;定义 &lt;em&gt;Define the skeleton of an algorithm in an operation, deferring some steps to subclasses. Template Method lets subclasses redefine certain steps of an algorithm without changing the algorithm’s structure&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;典型实现：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;大部分以 Template 命名的类，如 JdbcTemplate，TransactionTemplate&lt;/li&gt;
  &lt;li&gt;很多以 Abstract 命名的类，如 AbstractApplicationContext&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Zhang jinmiao</name></author><category term="Interview" /><summary type="html">1. Spring refresh 流程</summary></entry><entry><title type="html">多线程与并发面试问题集锦</title><link href="http://zhangjinmiao.github.io/interview/2022/08/20/concurrent.html" rel="alternate" type="text/html" title="多线程与并发面试问题集锦" /><published>2022-08-20T00:00:00+08:00</published><updated>2022-08-20T00:00:00+08:00</updated><id>http://zhangjinmiao.github.io/interview/2022/08/20/concurrent</id><content type="html" xml:base="http://zhangjinmiao.github.io/interview/2022/08/20/concurrent.html">&lt;h2 id=&quot;1-线程状态&quot;&gt;1. 线程状态&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;要求&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;掌握 Java 线程六种状态&lt;/li&gt;
  &lt;li&gt;掌握 Java 线程状态转换&lt;/li&gt;
  &lt;li&gt;能理解五种状态与六种状态两种说法的区别&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;六种状态及转换&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/concurrent/image-20210831090722658.png&quot; alt=&quot;image-20210831090722658&quot; /&gt;&lt;/p&gt;

&lt;p&gt;分别是&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;新建
    &lt;ul&gt;
      &lt;li&gt;当一个线程对象被创建，但还未调用 start 方法时处于&lt;strong&gt;新建&lt;/strong&gt;状态&lt;/li&gt;
      &lt;li&gt;此时未与操作系统底层线程关联&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;可运行
    &lt;ul&gt;
      &lt;li&gt;调用了 start 方法，就会由&lt;strong&gt;新建&lt;/strong&gt;进入&lt;strong&gt;可运行&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;此时与底层线程关联，由操作系统调度执行&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;终结
    &lt;ul&gt;
      &lt;li&gt;线程内代码已经执行完毕，由&lt;strong&gt;可运行&lt;/strong&gt;进入&lt;strong&gt;终结&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;此时会取消与底层线程关联&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;阻塞
    &lt;ul&gt;
      &lt;li&gt;当获取锁失败后，由&lt;strong&gt;可运行&lt;/strong&gt;进入 Monitor 的阻塞队列&lt;strong&gt;阻塞&lt;/strong&gt;，此时不占用 cpu 时间&lt;/li&gt;
      &lt;li&gt;当持锁线程释放锁时，会按照一定规则唤醒阻塞队列中的&lt;strong&gt;阻塞&lt;/strong&gt;线程，唤醒后的线程进入&lt;strong&gt;可运行&lt;/strong&gt;状态&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;等待
    &lt;ul&gt;
      &lt;li&gt;当获取锁成功后，但由于条件不满足，调用了 wait() 方法，此时从&lt;strong&gt;可运行&lt;/strong&gt;状态释放锁进入 Monitor 等待集合&lt;strong&gt;等待&lt;/strong&gt;，同样不占用 cpu 时间&lt;/li&gt;
      &lt;li&gt;当其它持锁线程调用 notify() 或 notifyAll() 方法，会按照一定规则唤醒等待集合中的&lt;strong&gt;等待&lt;/strong&gt;线程，恢复为&lt;strong&gt;可运行&lt;/strong&gt;状态&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;有时限等待
    &lt;ul&gt;
      &lt;li&gt;当获取锁成功后，但由于条件不满足，调用了 wait(long) 方法，此时从&lt;strong&gt;可运行&lt;/strong&gt;状态释放锁进入 Monitor 等待集合进行&lt;strong&gt;有时限等待&lt;/strong&gt;，同样不占用 cpu 时间&lt;/li&gt;
      &lt;li&gt;当其它持锁线程调用 notify() 或 notifyAll() 方法，会按照一定规则唤醒等待集合中的&lt;strong&gt;有时限等待&lt;/strong&gt;线程，恢复为&lt;strong&gt;可运行&lt;/strong&gt;状态，并重新去竞争锁&lt;/li&gt;
      &lt;li&gt;如果等待超时，也会从&lt;strong&gt;有时限等待&lt;/strong&gt;状态恢复为&lt;strong&gt;可运行&lt;/strong&gt;状态，并重新去竞争锁&lt;/li&gt;
      &lt;li&gt;还有一种情况是调用 sleep(long) 方法也会从&lt;strong&gt;可运行&lt;/strong&gt;状态进入&lt;strong&gt;有时限等待&lt;/strong&gt;状态，但与 Monitor 无关，不需要主动唤醒，超时时间到自然恢复为&lt;strong&gt;可运行&lt;/strong&gt;状态&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;em&gt;其它情况（只需了解）&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;可以用 interrupt() 方法打断&lt;strong&gt;等待&lt;/strong&gt;、&lt;strong&gt;有时限等待&lt;/strong&gt;的线程，让它们恢复为&lt;strong&gt;可运行&lt;/strong&gt;状态&lt;/li&gt;
    &lt;li&gt;park，unpark 等方法也可以让线程等待和唤醒&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;五种状态&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;五种状态的说法来自于操作系统层面的划分&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;img/image-20210831092652602.png&quot; alt=&quot;image-20210831092652602&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;运行态：分到 cpu 时间，能真正执行线程内代码的&lt;/li&gt;
  &lt;li&gt;就绪态：有资格分到 cpu 时间，但还未轮到它的&lt;/li&gt;
  &lt;li&gt;阻塞态：没资格分到 cpu 时间的
    &lt;ul&gt;
      &lt;li&gt;涵盖了 java 状态中提到的&lt;strong&gt;阻塞&lt;/strong&gt;、&lt;strong&gt;等待&lt;/strong&gt;、&lt;strong&gt;有时限等待&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;多出了阻塞 I/O，指线程在调用阻塞 I/O 时，实际活由 I/O 设备完成，此时线程无事可做，只能干等&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;新建与终结态：与 java 中同名状态类似，不再啰嗦&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-线程池&quot;&gt;2. 线程池&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;要求&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;掌握线程池的 7 大核心参数&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;七大参数&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;corePoolSize 核心线程数目 - 池中会保留的最多线程数&lt;/li&gt;
  &lt;li&gt;maximumPoolSize 最大线程数目 - 核心线程+救急线程的最大数目&lt;/li&gt;
  &lt;li&gt;keepAliveTime 生存时间 - 救急线程的生存时间，生存时间内没有新任务，此线程资源会释放&lt;/li&gt;
  &lt;li&gt;unit 时间单位 - 救急线程的生存时间单位，如秒、毫秒等&lt;/li&gt;
  &lt;li&gt;workQueue - 当没有空闲核心线程时，新来任务会加入到此队列排队，队列满会创建救急线程执行任务&lt;/li&gt;
  &lt;li&gt;threadFactory 线程工厂 - 可以定制线程对象的创建，例如设置线程名字、是否是守护线程等&lt;/li&gt;
  &lt;li&gt;handler 拒绝策略 - 当所有线程都在繁忙，workQueue 也放满时，会触发拒绝策略
    &lt;ol&gt;
      &lt;li&gt;抛异常 java.util.concurrent.ThreadPoolExecutor.AbortPolicy&lt;/li&gt;
      &lt;li&gt;由调用者执行任务 java.util.concurrent.ThreadPoolExecutor.CallerRunsPolicy&lt;/li&gt;
      &lt;li&gt;丢弃任务 java.util.concurrent.ThreadPoolExecutor.DiscardPolicy&lt;/li&gt;
      &lt;li&gt;丢弃最早排队任务 java.util.concurrent.ThreadPoolExecutor.DiscardOldestPolicy&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;img/image-20210831093204388.png&quot; alt=&quot;image-20210831093204388&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;em&gt;代码说明&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;day02.TestThreadPoolExecutor 以较为形象的方式演示了线程池的核心组成&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;3-wait-vs-sleep&quot;&gt;3. wait vs sleep&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;要求&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;能够说出二者区别&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;一个共同点，三个不同点&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;共同点&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;wait() ，wait(long) 和 sleep(long) 的效果都是让当前线程暂时放弃 CPU 的使用权，进入阻塞状态&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;不同点&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;方法归属不同
    &lt;ul&gt;
      &lt;li&gt;sleep(long) 是 Thread 的静态方法&lt;/li&gt;
      &lt;li&gt;而 wait()，wait(long) 都是 Object 的成员方法，每个对象都有&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;醒来时机不同
    &lt;ul&gt;
      &lt;li&gt;执行 sleep(long) 和 wait(long) 的线程都会在等待相应毫秒后醒来&lt;/li&gt;
      &lt;li&gt;wait(long) 和 wait() 还可以被 notify 唤醒，wait() 如果不唤醒就一直等下去&lt;/li&gt;
      &lt;li&gt;它们都可以被打断唤醒&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;锁特性不同（重点）
    &lt;ul&gt;
      &lt;li&gt;wait 方法的调用必须先获取 wait 对象的锁，而 sleep 则无此限制&lt;/li&gt;
      &lt;li&gt;wait 方法执行后会释放对象锁，允许其它线程获得该对象锁（我放弃 cpu，但你们还可以用）&lt;/li&gt;
      &lt;li&gt;而 sleep 如果在 synchronized 代码块中执行，并不会释放对象锁（我放弃 cpu，你们也用不了）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;4-lock-vs-synchronized&quot;&gt;4. lock vs synchronized&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;要求&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;掌握 lock 与 synchronized 的区别&lt;/li&gt;
  &lt;li&gt;理解 ReentrantLock 的公平、非公平锁&lt;/li&gt;
  &lt;li&gt;理解 ReentrantLock 中的条件变量&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;三个层面&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;不同点&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;语法层面
    &lt;ul&gt;
      &lt;li&gt;synchronized 是关键字，源码在 jvm 中，用 c++ 语言实现&lt;/li&gt;
      &lt;li&gt;Lock 是接口，源码由 jdk 提供，用 java 语言实现&lt;/li&gt;
      &lt;li&gt;使用 synchronized 时，退出同步代码块锁会自动释放，而使用 Lock 时，需要手动调用 unlock 方法释放锁&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;功能层面
    &lt;ul&gt;
      &lt;li&gt;二者均属于悲观锁、都具备基本的互斥、同步、锁重入功能&lt;/li&gt;
      &lt;li&gt;Lock 提供了许多 synchronized 不具备的功能，例如获取等待状态、公平锁、可打断、可超时、多条件变量&lt;/li&gt;
      &lt;li&gt;Lock 有适合不同场景的实现，如 ReentrantLock， ReentrantReadWriteLock&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;性能层面
    &lt;ul&gt;
      &lt;li&gt;在没有竞争时，synchronized 做了很多优化，如偏向锁、轻量级锁，性能不赖&lt;/li&gt;
      &lt;li&gt;在竞争激烈时，Lock 的实现通常会提供更好的性能&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;公平锁&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;公平锁的公平体现
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;已经处在阻塞队列&lt;/strong&gt;中的线程（不考虑超时）始终都是公平的，先进先出&lt;/li&gt;
      &lt;li&gt;公平锁是指&lt;strong&gt;未处于阻塞队列&lt;/strong&gt;中的线程来争抢锁，如果队列不为空，则老实到队尾等待&lt;/li&gt;
      &lt;li&gt;非公平锁是指&lt;strong&gt;未处于阻塞队列&lt;/strong&gt;中的线程来争抢锁，与队列头唤醒的线程去竞争，谁抢到算谁的&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;公平锁会降低吞吐量，一般不用&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;条件变量&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ReentrantLock 中的条件变量功能类似于普通 synchronized 的 wait，notify，用在当线程获得锁后，发现条件不满足时，临时等待的链表结构&lt;/li&gt;
  &lt;li&gt;与 synchronized 的等待集合不同之处在于，ReentrantLock 中的条件变量可以有多个，可以实现更精细的等待、唤醒控制&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;em&gt;代码说明&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;day02.TestReentrantLock 用较为形象的方式演示 ReentrantLock 的内部结构&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;5-volatile&quot;&gt;5. volatile&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;要求&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;掌握线程安全要考虑的三个问题&lt;/li&gt;
  &lt;li&gt;掌握 volatile 能解决哪些问题&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;原子性&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;起因：多线程下，不同线程的&lt;strong&gt;指令发生了交错&lt;/strong&gt;导致的共享变量的读写混乱&lt;/li&gt;
  &lt;li&gt;解决：用悲观锁或乐观锁解决，volatile 并不能解决原子性&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;可见性&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;起因：由于&lt;strong&gt;编译器优化、或缓存优化、或 CPU 指令重排序优化&lt;/strong&gt;导致的对共享变量所做的修改另外的线程看不到&lt;/li&gt;
  &lt;li&gt;解决：用 volatile 修饰共享变量，能够防止编译器等优化发生，让一个线程对共享变量的修改对另一个线程可见&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;有序性&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;起因：由于&lt;strong&gt;编译器优化、或缓存优化、或 CPU 指令重排序优化&lt;/strong&gt;导致指令的实际执行顺序与编写顺序不一致&lt;/li&gt;
  &lt;li&gt;解决：用 volatile 修饰共享变量会在读、写共享变量时加入不同的屏障，阻止其他读写操作越过屏障，从而达到阻止重排序的效果&lt;/li&gt;
  &lt;li&gt;注意：
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;volatile 变量写&lt;/strong&gt;加的屏障是阻止上方其它写操作越过屏障排到 &lt;strong&gt;volatile 变量写&lt;/strong&gt;之下&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;volatile 变量读&lt;/strong&gt;加的屏障是阻止下方其它读操作越过屏障排到 &lt;strong&gt;volatile 变量读&lt;/strong&gt;之上&lt;/li&gt;
      &lt;li&gt;volatile 读写加入的屏障只能防止同一线程内的指令重排&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;em&gt;代码说明&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;day02.threadsafe.AddAndSubtract 演示原子性&lt;/li&gt;
    &lt;li&gt;day02.threadsafe.ForeverLoop 演示可见性
      &lt;ul&gt;
        &lt;li&gt;注意：本例经实践检验是编译器优化导致的可见性问题&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;day02.threadsafe.Reordering 演示有序性
      &lt;ul&gt;
        &lt;li&gt;需要打成 jar 包后测试&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;请同时参考视频讲解&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;6-悲观锁-vs-乐观锁&quot;&gt;6. 悲观锁 vs 乐观锁&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;要求&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;掌握悲观锁和乐观锁的区别&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;对比悲观锁与乐观锁&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;悲观锁的代表是 synchronized 和 Lock 锁
    &lt;ul&gt;
      &lt;li&gt;其核心思想是【线程只有占有了锁，才能去操作共享变量，每次只有一个线程占锁成功，获取锁失败的线程，都得停下来等待】&lt;/li&gt;
      &lt;li&gt;线程从运行到阻塞、再从阻塞到唤醒，涉及线程上下文切换，如果频繁发生，影响性能&lt;/li&gt;
      &lt;li&gt;实际上，线程在获取 synchronized 和 Lock 锁时，如果锁已被占用，都会做几次重试操作，减少阻塞的机会&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;乐观锁的代表是 AtomicInteger，使用 cas 来保证原子性
    &lt;ul&gt;
      &lt;li&gt;其核心思想是【无需加锁，每次只有一个线程能成功修改共享变量，其它失败的线程不需要停止，不断重试直至成功】&lt;/li&gt;
      &lt;li&gt;由于线程一直运行，不需要阻塞，因此不涉及线程上下文切换&lt;/li&gt;
      &lt;li&gt;它需要多核 cpu 支持，且线程数不应超过 cpu 核数&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;em&gt;代码说明&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;day02.SyncVsCas 演示了分别使用乐观锁和悲观锁解决原子赋值&lt;/li&gt;
    &lt;li&gt;请同时参考视频讲解&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;7-hashtable-vs-concurrenthashmap&quot;&gt;7. Hashtable vs ConcurrentHashMap&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;要求&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;掌握 Hashtable 与 ConcurrentHashMap 的区别&lt;/li&gt;
  &lt;li&gt;掌握 ConcurrentHashMap 在不同版本的实现区别&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;更形象的演示，见资料中的 hash-demo.jar，运行需要 jdk14 以上环境，进入 jar 包目录，执行下面命令&lt;/p&gt;

  &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;java -jar --add-exports java.base/jdk.internal.misc=ALL-UNNAMED hash-demo.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Hashtable 对比 ConcurrentHashMap&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Hashtable 与 ConcurrentHashMap 都是线程安全的 Map 集合&lt;/li&gt;
  &lt;li&gt;Hashtable 并发度低，整个 Hashtable 对应一把锁，同一时刻，只能有一个线程操作它&lt;/li&gt;
  &lt;li&gt;ConcurrentHashMap 并发度高，整个 ConcurrentHashMap 对应多把锁，只要线程访问的是不同锁，那么不会冲突&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;ConcurrentHashMap 1.7&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;数据结构：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Segment(大数组) + HashEntry(小数组) + 链表&lt;/code&gt;，每个 Segment 对应一把锁，如果多个线程访问不同的 Segment，则不会冲突&lt;/li&gt;
  &lt;li&gt;并发度：Segment 数组大小即并发度，决定了同一时刻最多能有多少个线程并发访问。Segment 数组不能扩容，意味着并发度在 ConcurrentHashMap 创建时就固定了&lt;/li&gt;
  &lt;li&gt;索引计算
    &lt;ul&gt;
      &lt;li&gt;假设大数组长度是 $2^m$，key 在大数组内的索引是 key 的二次 hash 值的高 m 位&lt;/li&gt;
      &lt;li&gt;假设小数组长度是 $2^n$，key 在小数组内的索引是 key 的二次 hash 值的低 n 位&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;扩容：每个小数组的扩容相对独立，小数组在超过扩容因子时会触发扩容，每次扩容翻倍&lt;/li&gt;
  &lt;li&gt;Segment[0] 原型：首次创建其它小数组时，会以此原型为依据，数组长度，扩容因子都会以原型为准&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;ConcurrentHashMap 1.8&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;数据结构：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Node 数组 + 链表或红黑树&lt;/code&gt;，数组的每个头节点作为锁，如果多个线程访问的头节点不同，则不会冲突。首次生成头节点时如果发生竞争，利用 cas 而非 syncronized，进一步提升性能&lt;/li&gt;
  &lt;li&gt;并发度：Node 数组有多大，并发度就有多大，与 1.7 不同，Node 数组可以扩容&lt;/li&gt;
  &lt;li&gt;扩容条件：Node 数组满 3/4 时就会扩容&lt;/li&gt;
  &lt;li&gt;扩容单位：以链表为单位从后向前迁移链表，迁移完成的将旧数组头节点替换为 ForwardingNode&lt;/li&gt;
  &lt;li&gt;扩容时并发 get
    &lt;ul&gt;
      &lt;li&gt;根据是否为 ForwardingNode 来决定是在新数组查找还是在旧数组查找，不会阻塞&lt;/li&gt;
      &lt;li&gt;如果链表长度超过 1，则需要对节点进行复制（创建新节点），怕的是节点迁移后 next 指针改变&lt;/li&gt;
      &lt;li&gt;如果链表最后几个元素扩容后索引不变，则节点无需复制&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;扩容时并发 put
    &lt;ul&gt;
      &lt;li&gt;如果 put 的线程与扩容线程操作的链表是同一个，put 线程会阻塞&lt;/li&gt;
      &lt;li&gt;如果 put 的线程操作的链表还未迁移完成，即头节点不是 ForwardingNode，则可以并发执行&lt;/li&gt;
      &lt;li&gt;如果 put 的线程操作的链表已经迁移完成，即头结点是 ForwardingNode，则可以协助扩容&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;与 1.7 相比是懒惰初始化&lt;/li&gt;
  &lt;li&gt;capacity 代表预估的元素个数，capacity / factory 来计算出初始数组大小，需要贴近 $2^n$&lt;/li&gt;
  &lt;li&gt;loadFactor 只在计算初始数组大小时被使用，之后扩容固定为 3/4&lt;/li&gt;
  &lt;li&gt;超过树化阈值时的扩容问题，如果容量已经是 64，直接树化，否则在原来容量基础上做 3 轮扩容&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;8-threadlocal&quot;&gt;8. ThreadLocal&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;要求&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;掌握 ThreadLocal 的作用与原理&lt;/li&gt;
  &lt;li&gt;掌握 ThreadLocal 的内存释放时机&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;作用&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ThreadLocal 可以实现【资源对象】的线程隔离，让每个线程各用各的【资源对象】，避免争用引发的线程安全问题&lt;/li&gt;
  &lt;li&gt;ThreadLocal 同时实现了线程内的资源共享&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;原理&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;每个线程内有一个 ThreadLocalMap 类型的成员变量，用来存储资源对象&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;调用 set 方法，就是以 ThreadLocal 自己作为 key，资源对象作为 value，放入当前线程的 ThreadLocalMap 集合中&lt;/li&gt;
  &lt;li&gt;调用 get 方法，就是以 ThreadLocal 自己作为 key，到当前线程中查找关联的资源值&lt;/li&gt;
  &lt;li&gt;调用 remove 方法，就是以 ThreadLocal 自己作为 key，移除当前线程关联的资源值&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ThreadLocalMap 的一些特点&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;key 的 hash 值统一分配&lt;/li&gt;
  &lt;li&gt;初始容量 16，扩容因子 2/3，扩容容量翻倍&lt;/li&gt;
  &lt;li&gt;key 索引冲突后用开放寻址法解决冲突&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;弱引用 key&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ThreadLocalMap 中的 key 被设计为弱引用，原因如下&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Thread 可能需要长时间运行（如线程池中的线程），如果 key 不再使用，需要在内存不足（GC）时释放其占用的内存&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;内存释放时机&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;被动 GC 释放 key
    &lt;ul&gt;
      &lt;li&gt;仅是让 key 的内存释放，关联 value 的内存并不会释放&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;懒惰被动释放 value
    &lt;ul&gt;
      &lt;li&gt;get key 时，发现是 null key，则释放其 value 内存&lt;/li&gt;
      &lt;li&gt;set key 时，会使用启发式扫描，清除临近的 null key 的 value 内存，启发次数与元素个数，是否发现 null key 有关&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;主动 remove 释放 key，value
    &lt;ul&gt;
      &lt;li&gt;会同时释放 key，value 的内存，也会清除临近的 null key 的 value 内存&lt;/li&gt;
      &lt;li&gt;推荐使用它，因为一般使用 ThreadLocal 时都把它作为静态变量（即强引用），因此无法被动依靠 GC 回收&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Zhang jinmiao</name></author><category term="Interview" /><summary type="html">1. 线程状态</summary></entry><entry><title type="html">JVM 面试问题集锦</title><link href="http://zhangjinmiao.github.io/interview/2022/08/19/java-base.html" rel="alternate" type="text/html" title="JVM 面试问题集锦" /><published>2022-08-19T00:00:00+08:00</published><updated>2022-08-19T00:00:00+08:00</updated><id>http://zhangjinmiao.github.io/interview/2022/08/19/java%20base</id><content type="html" xml:base="http://zhangjinmiao.github.io/interview/2022/08/19/java-base.html">&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;em&gt;基础篇要点：算法、数据结构、基础设计模式&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;1-二分查找&quot;&gt;1. 二分查找&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;要求&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;能够用自己语言描述二分查找算法&lt;/li&gt;
  &lt;li&gt;能够手写二分查找代码&lt;/li&gt;
  &lt;li&gt;能够解答一些变化后的考法&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;算法描述&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;前提：有已排序数组 A（假设已经做好）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;定义左边界 L、右边界 R，确定搜索范围，循环执行二分查找（3、4两步）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;获取中间索引 M = Floor((L+R) /2)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;中间索引的值  A[M] 与待搜索的值 T 进行比较&lt;/p&gt;

    &lt;p&gt;① A[M] == T 表示找到，返回中间索引&lt;/p&gt;

    &lt;p&gt;② A[M] &amp;gt; T，中间值右侧的其它元素都大于 T，无需比较，中间索引左边去找，M - 1 设置为右边界，重新查找&lt;/p&gt;

    &lt;p&gt;③ A[M] &amp;lt; T，中间值左侧的其它元素都小于 T，无需比较，中间索引右边去找， M + 1 设置为左边界，重新查找&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;当 L &amp;gt; R 时，表示没有找到，应结束循环&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;更形象的描述请参考：binary_search.html&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;算法实现&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;binarySearch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;测试代码&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;35&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;48&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;49&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;47&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;binarySearch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;解决整数溢出问题&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;当 l 和 r 都较大时，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;l + r&lt;/code&gt; 有可能超过整数范围，造成运算错误，解决方法有两种：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;还有一种是：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;其它考法&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;有一个有序表为 1,5,8,11,19,22,31,35,40,45,48,49,50 当二分查找值为 48 的结点时，查找成功需要比较的次数&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用二分法在序列 1,4,6,7,15,33,39,50,64,78,75,81,89,96 中查找元素 81 时，需要经过（   ）次比较&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在拥有128个元素的数组中二分查找一个数，需要比较的次数最多不超过多少次&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;对于前两个题目，记得一个简要判断口诀：奇数二分取中间，偶数二分取中间靠左。对于后一道题目，需要知道公式：&lt;/p&gt;

\[n = log_2N = log_{10}N/log_{10}2\]

&lt;p&gt;其中 n 为查找次数，N 为元素个数&lt;/p&gt;

&lt;h2 id=&quot;2-冒泡排序&quot;&gt;2. 冒泡排序&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;要求&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;能够用自己语言描述冒泡排序算法&lt;/li&gt;
  &lt;li&gt;能够手写冒泡排序代码&lt;/li&gt;
  &lt;li&gt;了解一些冒泡排序的优化手段&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;算法描述&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;依次比较数组中相邻两个元素大小，若 a[j] &amp;gt; a[j+1]，则交换两个元素，两两都比较一遍称为一轮冒泡，结果是让最大的元素排至最后&lt;/li&gt;
  &lt;li&gt;重复以上步骤，直到整个数组有序&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;更形象的描述请参考：bubble_sort.html&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;算法实现&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bubble&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 一轮冒泡&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;swapped&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 是否发生了交换&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;比较次数&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nc&quot;&gt;Utils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;swapped&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;第&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;轮冒泡&quot;&lt;/span&gt;
                           &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;swapped&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;优化点1：每经过一轮冒泡，内层循环就可以减少一次&lt;/li&gt;
  &lt;li&gt;优化点2：如果某一轮冒泡没有发生交换，则表示所有数据有序，可以结束外层循环&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;进一步优化&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bubble_v2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 表示最后一次交换索引位置&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;比较次数&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nc&quot;&gt;Utils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;第轮冒泡&quot;&lt;/span&gt;
                           &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;每轮冒泡时，最后一次交换索引可以作为下一轮冒泡的比较次数，如果这个值为零，表示整个数组有序，直接退出外层循环即可&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3-选择排序&quot;&gt;3. 选择排序&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;要求&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;能够用自己语言描述选择排序算法&lt;/li&gt;
  &lt;li&gt;能够比较选择排序与冒泡排序&lt;/li&gt;
  &lt;li&gt;理解非稳定排序与稳定排序&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;算法描述&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;将数组分为两个子集，排序的和未排序的，每一轮从未排序的子集中选出最小的元素，放入排序子集&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;重复以上步骤，直到整个数组有序&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;更形象的描述请参考：selection_sort.html&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;算法实现&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;selection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// i 代表每轮选择最小元素要交换到的目标索引&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 代表最小元素的索引&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// j 元素比 s 元素还要小, 更新 s&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;优化点：为减少交换次数，每一轮可以先找最小的索引，在每轮最后再交换元素&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;与冒泡排序比较&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;二者平均时间复杂度都是 $O(n^2)$&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;选择排序一般要快于冒泡，因为其交换次数少&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;但如果集合有序度高，冒泡优于选择&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;冒泡属于稳定排序算法，而选择属于不稳定排序&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;稳定排序指，按对象中不同字段进行多次排序，不会打乱同值元素的顺序&lt;/li&gt;
      &lt;li&gt;不稳定排序则反之&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;稳定排序与不稳定排序&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;=================不稳定================&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Card&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cards&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getStaticCards&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cards&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;selection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cards&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Comparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;comparingInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Card&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sharpOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reversed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cards&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;selection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cards&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Comparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;comparingInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Card&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;numberOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reversed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cards&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;=================稳定=================&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cards&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getStaticCards&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cards&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bubble&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cards&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Comparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;comparingInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Card&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sharpOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reversed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cards&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bubble&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cards&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Comparator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;comparingInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Card&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;numberOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;reversed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cards&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;都是先按照花色排序（♠♥♣♦），再按照数字排序（AKQJ…）&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;不稳定排序算法按数字排序时，会打乱原本同值的花色顺序&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[[♠7], [♠2], [♠4], [♠5], [♥2], [♥5]]
[[♠7], [♠5], [♥5], [♠4], [♥2], [♠2]]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;原来 ♠2 在前 ♥2 在后，按数字再排后，他俩的位置变了&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;稳定排序算法按数字排序时，会保留原本同值的花色顺序，如下所示 ♠2 与 ♥2 的相对位置不变&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[[♠7], [♠2], [♠4], [♠5], [♥2], [♥5]]
[[♠7], [♠5], [♥5], [♠4], [♠2], [♥2]]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;4-插入排序&quot;&gt;4. 插入排序&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;要求&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;能够用自己语言描述插入排序算法&lt;/li&gt;
  &lt;li&gt;能够比较插入排序与选择排序&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;算法描述&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;将数组分为两个区域，排序区域和未排序区域，每一轮从未排序区域中取出第一个元素，插入到排序区域（需保证顺序）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;重复以上步骤，直到整个数组有序&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;更形象的描述请参考：insertion_sort.html&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;算法实现&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 修改了代码与希尔排序一致&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// i 代表待插入元素的索引&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 代表待插入的元素值&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// j-1 是上一个元素索引，如果 &amp;gt; t，后移&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 如果 j-1 已经 &amp;lt;= t, 则 j 就是插入位置&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;与选择排序比较&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;二者平均时间复杂度都是 $O(n^2)$&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;大部分情况下，插入都略优于选择&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;有序集合插入的时间复杂度为 $O(n)$&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;插入属于稳定排序算法，而选择属于不稳定排序&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;提示&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;插入排序通常被同学们所轻视，其实它的地位非常重要。小数据量排序，都会优先选择插入排序&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;5-希尔排序&quot;&gt;5. 希尔排序&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;要求&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;能够用自己语言描述希尔排序算法&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;算法描述&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;首先选取一个间隙序列，如 (n/2，n/4 … 1)，n 为数组长度&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;每一轮将间隙相等的元素视为一组，对组内元素进行插入排序，目的有二&lt;/p&gt;

    &lt;p&gt;① 少量元素插入排序速度很快&lt;/p&gt;

    &lt;p&gt;② 让组内值较大的元素更快地移动到后方&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;当间隙逐渐减少，直至为 1 时，即可完成排序&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;更形象的描述请参考：shell_sort.html&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;算法实现&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// i 代表待插入元素的索引&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 代表待插入的元素值&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// 每次与上一个间隙为 gap 的元素进行插入排序&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// j-gap 是上一个元素索引，如果 &amp;gt; t，后移&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 如果 j-1 已经 &amp;lt;= t, 则 j 就是插入位置&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; gap:&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;参考资料&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://en.wikipedia.org/wiki/Shellsort&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;6-快速排序&quot;&gt;6. 快速排序&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;要求&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;能够用自己语言描述快速排序算法&lt;/li&gt;
  &lt;li&gt;掌握手写单边循环、双边循环代码之一&lt;/li&gt;
  &lt;li&gt;能够说明快排特点&lt;/li&gt;
  &lt;li&gt;了解洛穆托与霍尔两种分区方案的性能比较&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;算法描述&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;每一轮排序选择一个基准点（pivot）进行分区
    &lt;ol&gt;
      &lt;li&gt;让小于基准点的元素的进入一个分区，大于基准点的元素的进入另一个分区&lt;/li&gt;
      &lt;li&gt;当分区完成时，基准点元素的位置就是其最终位置&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;在子分区内重复以上过程，直至子分区元素个数少于等于 1，这体现的是分而治之的思想 （&lt;a href=&quot;https://en.wikipedia.org/wiki/Divide-and-conquer_algorithm&quot;&gt;divide-and-conquer&lt;/a&gt;）&lt;/li&gt;
  &lt;li&gt;从以上描述可以看出，一个关键在于分区算法，常见的有洛穆托分区方案、双边循环分区方案、霍尔分区方案&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;更形象的描述请参考：quick_sort.html&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;单边循环快排（lomuto 洛穆托分区方案）&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;选择最右元素作为基准点元素&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;j 指针负责找到比基准点小的元素，一旦找到则与 i 进行交换&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;i 指针维护小于基准点元素的边界，也是每次交换的目标索引&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;最后基准点与 i 交换，i 即为分区位置&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;quick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// p 索引值&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;quick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 左边分区的范围确定&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;quick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 左边分区的范围确定&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;partition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 基准点元素&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; i=&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 返回值代表了基准点元素所在的正确索引，用它确定下一轮分区的边界&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;双边循环快排（不完全等价于 hoare 霍尔分区方案）&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;选择最左元素作为基准点元素&lt;/li&gt;
  &lt;li&gt;j 指针负责从右向左找比基准点小的元素，i 指针负责从左向右找比基准点大的元素，一旦找到二者交换，直至 i，j 相交&lt;/li&gt;
  &lt;li&gt;最后基准点与 i（此时 i 与 j 相等）交换，i 即为分区位置&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;要点&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;基准点在左边，并且要先 j 后 i&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;while( &lt;strong&gt;i&lt;/strong&gt; &lt;strong&gt;&amp;lt; j&lt;/strong&gt; &amp;amp;&amp;amp; a[j] &amp;gt; pv ) j–&lt;/li&gt;
  &lt;li&gt;while ( &lt;strong&gt;i&lt;/strong&gt; &lt;strong&gt;&amp;lt; j&lt;/strong&gt; &amp;amp;&amp;amp; a[i] &lt;strong&gt;&amp;lt;=&lt;/strong&gt; pv ) i++&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;quick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;quick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;quick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;partition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// j 从右找小的&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// i 从左找大的&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; j=&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;快排特点&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;平均时间复杂度是 $O(nlog_2⁡n )$，最坏时间复杂度 $O(n^2)$&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;数据量较大时，优势非常明显&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;属于不稳定排序&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;洛穆托分区方案 vs 霍尔分区方案&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;霍尔的移动次数平均来讲比洛穆托少3倍&lt;/li&gt;
  &lt;li&gt;https://qastack.cn/cs/11458/quicksort-partitioning-hoare-vs-lomuto&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;em&gt;补充代码说明&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;day01.sort.QuickSort3 演示了空穴法改进的双边快排，比较次数更少&lt;/li&gt;
    &lt;li&gt;day01.sort.QuickSortHoare 演示了霍尔分区的实现&lt;/li&gt;
    &lt;li&gt;day01.sort.LomutoVsHoare 对四种分区实现的移动次数比较&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;7-arraylist&quot;&gt;7. ArrayList&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;要求&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;掌握 ArrayList 扩容规则&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;扩容规则&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;ArrayList() 会使用长度为零的数组&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ArrayList(int initialCapacity) 会使用指定容量的数组&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;public ArrayList(Collection&amp;lt;? extends E&amp;gt; c) 会使用 c 的大小作为数组容量&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;add(Object o) 首次扩容为 10，再次扩容为上次容量的 1.5 倍&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;addAll(Collection c) 没有元素时，扩容为 Math.max(10, 实际元素个数)，有元素时为 Math.max(原容量 1.5 倍, 实际元素个数)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;其中第 4 点必须知道，其它几点视个人情况而定&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;提示&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;测试代码见 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;day01.list.TestArrayList&lt;/code&gt; ，这里不再列出&lt;/li&gt;
  &lt;li&gt;要&lt;strong&gt;注意&lt;/strong&gt;的是，示例中用反射方式来更直观地反映 ArrayList 的扩容特征，但从 JDK 9 由于模块化的影响，对反射做了较多限制，需要在运行测试代码时添加 VM 参数 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--add-opens java.base/java.util=ALL-UNNAMED&lt;/code&gt; 方能运行通过，后面的例子都有相同问题&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;em&gt;代码说明&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;day01.list.TestArrayList#arrayListGrowRule 演示了 add(Object) 方法的扩容规则，输入参数 n 代表打印多少次扩容后的数组长度&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;8-iterator&quot;&gt;8. Iterator&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;要求&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;掌握什么是 Fail-Fast、什么是 Fail-Safe&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fail-Fast 与 Fail-Safe&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;ArrayList 是 fail-fast 的典型代表，遍历的同时不能修改，尽快失败&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;CopyOnWriteArrayList 是 fail-safe 的典型代表，遍历的同时可以修改，原理是读写分离&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;提示&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;测试代码见 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;day01.list.FailFastVsFailSafe&lt;/code&gt;，这里不再列出&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;9-linkedlist&quot;&gt;9. LinkedList&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;要求&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;能够说清楚 LinkedList 对比 ArrayList 的区别，并重视纠正部分错误的认知&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;LinkedList&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;基于双向链表，无需连续内存&lt;/li&gt;
  &lt;li&gt;随机访问慢（要沿着链表遍历）&lt;/li&gt;
  &lt;li&gt;头尾插入删除性能高&lt;/li&gt;
  &lt;li&gt;占用内存多&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;ArrayList&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;基于数组，需要连续内存&lt;/li&gt;
  &lt;li&gt;随机访问快（指根据下标访问）&lt;/li&gt;
  &lt;li&gt;尾部插入、删除性能可以，其它部分插入、删除都会移动数据，因此性能会低&lt;/li&gt;
  &lt;li&gt;可以利用 cpu 缓存，局部性原理&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;em&gt;代码说明&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;day01.list.ArrayListVsLinkedList#randomAccess 对比随机访问性能&lt;/li&gt;
    &lt;li&gt;day01.list.ArrayListVsLinkedList#addMiddle 对比向中间插入性能&lt;/li&gt;
    &lt;li&gt;day01.list.ArrayListVsLinkedList#addFirst 对比头部插入性能&lt;/li&gt;
    &lt;li&gt;day01.list.ArrayListVsLinkedList#addLast 对比尾部插入性能&lt;/li&gt;
    &lt;li&gt;day01.list.ArrayListVsLinkedList#linkedListSize 打印一个 LinkedList 占用内存&lt;/li&gt;
    &lt;li&gt;day01.list.ArrayListVsLinkedList#arrayListSize 打印一个 ArrayList 占用内存&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;10-hashmap&quot;&gt;10. HashMap&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;要求&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;掌握 HashMap 的基本数据结构&lt;/li&gt;
  &lt;li&gt;掌握树化&lt;/li&gt;
  &lt;li&gt;理解索引计算方法、二次 hash 的意义、容量对索引计算的影响&lt;/li&gt;
  &lt;li&gt;掌握 put 流程、扩容、扩容因子&lt;/li&gt;
  &lt;li&gt;理解并发使用 HashMap 可能导致的问题&lt;/li&gt;
  &lt;li&gt;理解 key 的设计&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;1基本数据结构&quot;&gt;1）基本数据结构&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;1.7 数组 + 链表&lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;1.8 数组 + （链表&lt;/td&gt;
          &lt;td&gt;红黑树）&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;更形象的演示，见资料中的 hash-demo.jar，运行需要 jdk14 以上环境，进入 jar 包目录，执行下面命令&lt;/p&gt;

  &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;java -jar --add-exports java.base/jdk.internal.misc=ALL-UNNAMED hash-demo.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;2树化与退化&quot;&gt;2）树化与退化&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;树化意义&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;红黑树用来避免 DoS 攻击，防止链表超长时性能下降，树化应当是偶然情况，是保底策略&lt;/li&gt;
  &lt;li&gt;hash 表的查找，更新的时间复杂度是 $O(1)$，而红黑树的查找，更新的时间复杂度是 $O(log_2⁡n )$，TreeNode 占用空间也比普通 Node 的大，如非必要，尽量还是使用链表&lt;/li&gt;
  &lt;li&gt;hash 值如果足够随机，则在 hash 表内按泊松分布，在负载因子 0.75 的情况下，长度超过 8 的链表出现概率是 0.00000006，树化阈值选择 8 就是为了让树化几率足够小&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;树化规则&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;当链表长度超过树化阈值 8 时，先尝试扩容来减少链表长度，如果数组容量已经 &amp;gt;=64，才会进行树化&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;退化规则&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;情况1：在扩容时如果拆分树时，树元素个数 &amp;lt;= 6 则会退化链表&lt;/li&gt;
  &lt;li&gt;情况2：remove 树节点时，若 root、root.left、root.right、root.left.left 有一个为 null ，也会退化为链表&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3索引计算&quot;&gt;3）索引计算&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;索引计算方法&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;首先，计算对象的 hashCode()&lt;/li&gt;
  &lt;li&gt;再进行调用 HashMap 的 hash() 方法进行二次哈希
    &lt;ul&gt;
      &lt;li&gt;二次 hash() 是为了综合高位数据，让哈希分布更为均匀&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;最后 &amp;amp; (capacity – 1) 得到索引&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;数组容量为何是 2 的 n 次幂&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;计算索引时效率更高：如果是 2 的 n 次幂可以使用位与运算代替取模&lt;/li&gt;
  &lt;li&gt;扩容时重新计算索引效率更高： hash &amp;amp; oldCap == 0 的元素留在原来位置 ，否则新位置 = 旧位置 + oldCap&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;二次 hash 是为了配合 &lt;strong&gt;容量是 2 的 n 次幂&lt;/strong&gt; 这一设计前提，如果 hash 表的容量不是 2 的 n 次幂，则不必二次 hash&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;容量是 2 的 n 次幂&lt;/strong&gt; 这一设计计算索引效率更好，但 hash 的分散性就不好，需要二次 hash 来作为补偿，没有采用这一设计的典型例子是 Hashtable&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;4put-与扩容&quot;&gt;4）put 与扩容&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;put 流程&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;HashMap 是懒惰创建数组的，首次使用才创建数组&lt;/li&gt;
  &lt;li&gt;计算索引（桶下标）&lt;/li&gt;
  &lt;li&gt;如果桶下标还没人占用，创建 Node 占位返回&lt;/li&gt;
  &lt;li&gt;如果桶下标已经有人占用
    &lt;ol&gt;
      &lt;li&gt;已经是 TreeNode 走红黑树的添加或更新逻辑&lt;/li&gt;
      &lt;li&gt;是普通 Node，走链表的添加或更新逻辑，如果链表长度超过树化阈值，走树化逻辑&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;返回前检查容量是否超过阈值，一旦超过进行扩容&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;1.7 与 1.8 的区别&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;链表插入节点时，1.7 是头插法，1.8 是尾插法&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;1.7 是大于等于阈值且没有空位时才扩容，而 1.8 是大于阈值就扩容&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;1.8 在扩容计算 Node 索引时，会优化&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;扩容（加载）因子为何默认是 0.75f&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;在空间占用与查询时间之间取得较好的权衡&lt;/li&gt;
  &lt;li&gt;大于这个值，空间节省了，但链表就会比较长影响性能&lt;/li&gt;
  &lt;li&gt;小于这个值，冲突减少了，但扩容就会更频繁，空间占用也更多&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;5并发问题&quot;&gt;5）并发问题&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;扩容死链（1.7 会存在）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1.7 源码如下：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;transfer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newTable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rehash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newCapacity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newTable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rehash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indexFor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newCapacity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newTable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;newTable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;e 和 next 都是局部变量，用来指向当前节点和下一个节点&lt;/li&gt;
  &lt;li&gt;线程1（绿色）的临时变量 e 和 next 刚引用了这俩节点，还未来得及移动节点，发生了线程切换，由线程2（蓝色）完成扩容和迁移&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/javabase/image-20210831084325075.png&quot; alt=&quot;image-20210831084325075&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;线程2 扩容完成，由于头插法，链表顺序颠倒。但线程1 的临时变量 e 和 next 还引用了这俩节点，还要再来一遍迁移&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/javabase/image-20210831084723383.png&quot; alt=&quot;image-20210831084723383&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;第一次循环
    &lt;ul&gt;
      &lt;li&gt;循环接着线程切换前运行，注意此时 e 指向的是节点 a，next 指向的是节点 b&lt;/li&gt;
      &lt;li&gt;e 头插 a 节点，注意图中画了两份 a 节点，但事实上只有一个（为了不让箭头特别乱画了两份）&lt;/li&gt;
      &lt;li&gt;当循环结束是 e 会指向 next 也就是 b 节点&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/javabase/image-20210831084855348.png&quot; alt=&quot;image-20210831084855348&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;第二次循环
    &lt;ul&gt;
      &lt;li&gt;next 指向了节点 a&lt;/li&gt;
      &lt;li&gt;e 头插节点 b&lt;/li&gt;
      &lt;li&gt;当循环结束时，e 指向 next 也就是节点 a&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/javabase/image-20210831085329449.png&quot; alt=&quot;image-20210831085329449&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;第三次循环
    &lt;ul&gt;
      &lt;li&gt;next 指向了 null&lt;/li&gt;
      &lt;li&gt;e 头插节点 a，&lt;strong&gt;a 的 next 指向了 b&lt;/strong&gt;（之前 a.next 一直是 null），b 的 next 指向 a，死链已成&lt;/li&gt;
      &lt;li&gt;当循环结束时，e 指向 next 也就是 null，因此第四次循环时会正常退出&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/javabase/image-20210831085543224.png&quot; alt=&quot;image-20210831085543224&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;数据错乱（1.7，1.8 都会存在）&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;代码参考 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;day01.map.HashMapMissData&lt;/code&gt;，具体调试步骤参考视频&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;em&gt;补充代码说明&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;day01.map.HashMapDistribution 演示 map 中链表长度符合泊松分布&lt;/li&gt;
    &lt;li&gt;day01.map.DistributionAffectedByCapacity 演示容量及 hashCode 取值对分布的影响
      &lt;ul&gt;
        &lt;li&gt;day01.map.DistributionAffectedByCapacity#hashtableGrowRule 演示了 Hashtable 的扩容规律&lt;/li&gt;
        &lt;li&gt;day01.sort.Utils#randomArray 如果 hashCode 足够随机，容量是否是 2 的 n 次幂影响不大&lt;/li&gt;
        &lt;li&gt;day01.sort.Utils#lowSameArray 如果 hashCode 低位一样的多，容量是 2 的 n 次幂会导致分布不均匀&lt;/li&gt;
        &lt;li&gt;day01.sort.Utils#evenArray 如果 hashCode 偶数的多，容量是 2 的 n 次幂会导致分布不均匀&lt;/li&gt;
        &lt;li&gt;由此得出对于容量是 2 的 n 次幂的设计来讲，二次 hash 非常重要&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;day01.map.HashMapVsHashtable 演示了对于同样数量的单词字符串放入 HashMap 和 Hashtable 分布上的区别&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;6key-的设计&quot;&gt;6）key 的设计&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;key 的设计要求&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;HashMap 的 key 可以为 null，但 Map 的其他实现则不然&lt;/li&gt;
  &lt;li&gt;作为 key 的对象，必须实现 hashCode 和 equals，并且 key 的内容不能修改（不可变）&lt;/li&gt;
  &lt;li&gt;key 的 hashCode 应该有良好的散列性&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如果 key 可变，例如修改了 age 会导致再次查询时查询不到&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HashMapMutableKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stu&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;张三&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;stu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setAge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;student&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;String 对象的 hashCode() 设计&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;目标是达到较为均匀的散列效果，每个字符串的 hashCode 足够独特&lt;/li&gt;
  &lt;li&gt;字符串中的每个字符都可以表现为一个数字，称为 $S_i$，其中 i 的范围是 0 ~ n - 1&lt;/li&gt;
  &lt;li&gt;散列公式为： $S_0∗31^{(n-1)}+ S_1∗31^{(n-2)}+ … S_i ∗ 31^{(n-1-i)}+ …S_{(n-1)}∗31^0$&lt;/li&gt;
  &lt;li&gt;31 代入公式有较好的散列特性，并且 31 * h 可以被优化为
    &lt;ul&gt;
      &lt;li&gt;即 $32 ∗h -h $&lt;/li&gt;
      &lt;li&gt;即 $2^5  ∗h -h$&lt;/li&gt;
      &lt;li&gt;即 $h≪5  -h$&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;11-单例模式&quot;&gt;11. 单例模式&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;要求&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;掌握五种单例模式的实现方式&lt;/li&gt;
  &lt;li&gt;理解为何 DCL 实现时要使用 volatile 修饰静态变量&lt;/li&gt;
  &lt;li&gt;了解 jdk 中用到单例的场景&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;饿汉式&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton1&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Serializable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Singleton1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;INSTANCE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RuntimeException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;单例对象不能重复创建&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;private Singleton1()&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton1&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;INSTANCE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton1&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;INSTANCE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;otherMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;otherMethod()&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;readResolve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;INSTANCE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;构造方法抛出异常是防止反射破坏单例&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;readResolve()&lt;/code&gt; 是防止反序列化破坏单例&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;枚举饿汉式&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;INSTANCE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Singleton2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;private Singleton2()&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;@&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toHexString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton2&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;INSTANCE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;otherMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;otherMethod()&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;枚举饿汉式能天然防止反射、反序列化破坏单例&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;懒汉式&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton3&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Serializable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Singleton3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;private Singleton3()&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton3&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;INSTANCE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Singleton3.class&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton3&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;INSTANCE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;no&quot;&gt;INSTANCE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;INSTANCE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;otherMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;otherMethod()&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;其实只有首次创建单例对象时才需要同步，但该代码实际上每次调用都会同步&lt;/li&gt;
  &lt;li&gt;因此有了下面的双检锁改进&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;双检锁懒汉式&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton4&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Serializable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Singleton4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;private Singleton4()&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton4&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;INSTANCE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 可见性，有序性&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton4&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;INSTANCE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Singleton4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;INSTANCE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;no&quot;&gt;INSTANCE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;INSTANCE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;otherMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;otherMethod()&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;为何必须加 volatile：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INSTANCE = new Singleton4()&lt;/code&gt; 不是原子的，分成 3 步：创建对象、调用构造、给静态变量赋值，其中后两步可能被指令重排序优化，变成先赋值、再调用构造&lt;/li&gt;
  &lt;li&gt;如果线程1 先执行了赋值，线程2 执行到第一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INSTANCE == null&lt;/code&gt; 时发现 INSTANCE 已经不为 null，此时就会返回一个未完全构造的对象&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;内部类懒汉式&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton5&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Serializable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Singleton5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;private Singleton5()&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Holder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton5&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;INSTANCE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton5&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Holder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;INSTANCE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;otherMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;otherMethod()&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;避免了双检锁的缺点&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;JDK 中单例的体现&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Runtime 体现了饿汉式单例&lt;/li&gt;
  &lt;li&gt;Console 体现了双检锁懒汉式单例&lt;/li&gt;
  &lt;li&gt;Collections 中的 EmptyNavigableSet 内部类懒汉式单例&lt;/li&gt;
  &lt;li&gt;ReverseComparator.REVERSE_ORDER 内部类懒汉式单例&lt;/li&gt;
  &lt;li&gt;Comparators.NaturalOrderComparator.INSTANCE 枚举饿汉式单例&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Zhang jinmiao</name></author><category term="Interview" /><summary type="html">基础篇要点：算法、数据结构、基础设计模式</summary></entry><entry><title type="html">微服务常见面试</title><link href="http://zhangjinmiao.github.io/microservice/2022/08/16/microservice-qa.html" rel="alternate" type="text/html" title="微服务常见面试" /><published>2022-08-16T00:00:00+08:00</published><updated>2022-08-16T00:00:00+08:00</updated><id>http://zhangjinmiao.github.io/microservice/2022/08/16/microservice-qa</id><content type="html" xml:base="http://zhangjinmiao.github.io/microservice/2022/08/16/microservice-qa.html">&lt;h1 id=&quot;1微服务篇&quot;&gt;1.微服务篇&lt;/h1&gt;

&lt;h2 id=&quot;11springcloud常见组件有哪些&quot;&gt;1.1.SpringCloud常见组件有哪些？&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;问题说明&lt;/strong&gt;：这个题目主要考察对SpringCloud的组件基本了解&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;难易程度&lt;/strong&gt;：简单&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;参考话术&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;SpringCloud包含的组件很多，有很多功能是重复的。其中最常用组件包括：&lt;/p&gt;

&lt;p&gt;•注册中心组件：Eureka、Nacos等&lt;/p&gt;

&lt;p&gt;•负载均衡组件：Ribbon&lt;/p&gt;

&lt;p&gt;•远程调用组件：OpenFeign&lt;/p&gt;

&lt;p&gt;•网关组件：Zuul、Gateway&lt;/p&gt;

&lt;p&gt;•服务保护组件：Hystrix、Sentinel&lt;/p&gt;

&lt;p&gt;•服务配置管理组件：SpringCloudConfig、Nacos&lt;/p&gt;

&lt;h2 id=&quot;12nacos的服务注册表结构是怎样的&quot;&gt;1.2.Nacos的服务注册表结构是怎样的？&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;问题说明&lt;/strong&gt;：考察对Nacos数据分级结构的了解，以及Nacos源码的掌握情况&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;难易程度&lt;/strong&gt;：一般&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;参考话术&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;Nacos采用了数据的分级存储模型，最外层是Namespace，用来隔离环境。然后是Group，用来对服务分组。接下来就是服务（Service）了，一个服务包含多个实例，但是可能处于不同机房，因此Service下有多个集群（Cluster），Cluster下是不同的实例（Instance）。&lt;/p&gt;

&lt;p&gt;对应到Java代码中，Nacos采用了一个多层的Map来表示。结构为Map&amp;lt;String, Map&amp;lt;String, Service»，其中最外层Map的key就是namespaceId，值是一个Map。内层Map的key是group拼接serviceName，值是Service对象。Service对象内部又是一个Map，key是集群名称，值是Cluster对象。而Cluster对象内部维护了Instance的集合。&lt;/p&gt;

&lt;p&gt;如图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/wfwms/image-20210925215305446.png&quot; alt=&quot;image-20210925215305446&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;13nacos如何支撑阿里内部数十万服务注册压力&quot;&gt;1.3.Nacos如何支撑阿里内部数十万服务注册压力？&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;问题说明&lt;/strong&gt;：考察对Nacos源码的掌握情况&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;难易程度&lt;/strong&gt;：难&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;参考话术&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;Nacos内部接收到注册的请求时，不会立即写数据，而是将服务注册的任务放入一个阻塞队列就立即响应给客户端。然后利用线程池读取阻塞队列中的任务，异步来完成实例更新，从而提高并发写能力。&lt;/p&gt;

&lt;h2 id=&quot;14nacos如何避免并发读写冲突问题&quot;&gt;1.4.Nacos如何避免并发读写冲突问题？&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;问题说明&lt;/strong&gt;：考察对Nacos源码的掌握情况&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;难易程度&lt;/strong&gt;：难&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;参考话术&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;Nacos在更新实例列表时，会采用CopyOnWrite技术，首先将旧的实例列表拷贝一份，然后更新拷贝的实例列表，再用更新后的实例列表来覆盖旧的实例列表。&lt;/p&gt;

&lt;p&gt;这样在更新的过程中，就不会对读实例列表的请求产生影响，也不会出现脏读问题了。&lt;/p&gt;

&lt;h2 id=&quot;15nacos与eureka的区别有哪些&quot;&gt;1.5.Nacos与Eureka的区别有哪些？&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;问题说明&lt;/strong&gt;：考察对Nacos、Eureka的底层实现的掌握情况&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;难易程度&lt;/strong&gt;：难&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;参考话术&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;Nacos与Eureka有相同点，也有不同之处，可以从以下几点来描述：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;接口方式&lt;/strong&gt;：Nacos与Eureka都对外暴露了Rest风格的API接口，用来实现服务注册、发现等功能&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;实例类型&lt;/strong&gt;：Nacos的实例有永久和临时实例之分；而Eureka只支持临时实例&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;健康检测&lt;/strong&gt;：Nacos对临时实例采用心跳模式检测，对永久实例采用主动请求来检测；Eureka只支持心跳模式&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;服务发现&lt;/strong&gt;：Nacos支持定时拉取和订阅推送两种模式；Eureka只支持定时拉取模式&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;16sentinel的限流与gateway的限流有什么差别&quot;&gt;1.6.Sentinel的限流与Gateway的限流有什么差别？&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;问题说明&lt;/strong&gt;：考察对限流算法的掌握情况&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;难易程度&lt;/strong&gt;：难&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;参考话术&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;限流算法常见的有三种实现：滑动时间窗口、令牌桶算法、漏桶算法。Gateway则采用了基于Redis实现的令牌桶算法。&lt;/p&gt;

&lt;p&gt;而Sentinel内部却比较复杂：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;默认限流模式是基于滑动时间窗口算法&lt;/li&gt;
  &lt;li&gt;排队等待的限流模式则基于漏桶算法&lt;/li&gt;
  &lt;li&gt;而热点参数限流则是基于令牌桶算法&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;17sentinel的线程隔离与hystix的线程隔离有什么差别&quot;&gt;1.7.Sentinel的线程隔离与Hystix的线程隔离有什么差别?&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;问题说明&lt;/strong&gt;：考察对线程隔离方案的掌握情况&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;难易程度&lt;/strong&gt;：一般&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;参考话术&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;Hystix默认是基于线程池实现的线程隔离，每一个被隔离的业务都要创建一个独立的线程池，线程过多会带来额外的CPU开销，性能一般，但是隔离性更强。&lt;/p&gt;

&lt;p&gt;Sentinel是基于信号量（计数器）实现的线程隔离，不用创建线程池，性能较好，但是隔离性一般。&lt;/p&gt;

&lt;h1 id=&quot;2mq篇&quot;&gt;2.MQ篇&lt;/h1&gt;

&lt;h2 id=&quot;21你们为什么选择了rabbitmq而不是其它的mq&quot;&gt;2.1.你们为什么选择了RabbitMQ而不是其它的MQ？&lt;/h2&gt;

&lt;p&gt;如图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/wfwms/image-20210925220034702.png&quot; alt=&quot;image-20210925220034702&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;话术：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;kafka是以吞吐量高而闻名，不过其数据稳定性一般，而且无法保证消息有序性。我们公司的日志收集也有使用，业务模块中则使用的RabbitMQ。&lt;/p&gt;

&lt;p&gt;阿里巴巴的RocketMQ基于Kafka的原理，弥补了Kafka的缺点，继承了其高吞吐的优势，其客户端目前以Java为主。但是我们担心阿里巴巴开源产品的稳定性，所以就没有使用。&lt;/p&gt;

&lt;p&gt;RabbitMQ基于面向并发的语言Erlang开发，吞吐量不如Kafka，但是对我们公司来讲够用了。而且消息可靠性较好，并且消息延迟极低，集群搭建比较方便。支持多种协议，并且有各种语言的客户端，比较灵活。Spring对RabbitMQ的支持也比较好，使用起来比较方便，比较符合我们公司的需求。&lt;/p&gt;

&lt;p&gt;综合考虑我们公司的并发需求以及稳定性需求，我们选择了RabbitMQ。&lt;/p&gt;

&lt;h2 id=&quot;22rabbitmq如何确保消息的不丢失&quot;&gt;2.2.RabbitMQ如何确保消息的不丢失？&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;话术：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;RabbitMQ针对消息传递过程中可能发生问题的各个地方，给出了针对性的解决方案：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;生产者发送消息时可能因为网络问题导致消息没有到达交换机：
    &lt;ul&gt;
      &lt;li&gt;RabbitMQ提供了publisher confirm机制
        &lt;ul&gt;
          &lt;li&gt;生产者发送消息后，可以编写ConfirmCallback函数&lt;/li&gt;
          &lt;li&gt;消息成功到达交换机后，RabbitMQ会调用ConfirmCallback通知消息的发送者，返回ACK&lt;/li&gt;
          &lt;li&gt;消息如果未到达交换机，RabbitMQ也会调用ConfirmCallback通知消息的发送者，返回NACK&lt;/li&gt;
          &lt;li&gt;消息超时未发送成功也会抛出异常&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;消息到达交换机后，如果未能到达队列，也会导致消息丢失：
    &lt;ul&gt;
      &lt;li&gt;RabbitMQ提供了publisher return机制
        &lt;ul&gt;
          &lt;li&gt;生产者可以定义ReturnCallback函数&lt;/li&gt;
          &lt;li&gt;消息到达交换机，未到达队列，RabbitMQ会调用ReturnCallback通知发送者，告知失败原因&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;消息到达队列后，MQ宕机也可能导致丢失消息：
    &lt;ul&gt;
      &lt;li&gt;RabbitMQ提供了持久化功能，集群的主从备份功能
        &lt;ul&gt;
          &lt;li&gt;消息持久化，RabbitMQ会将交换机、队列、消息持久化到磁盘，宕机重启可以恢复消息&lt;/li&gt;
          &lt;li&gt;镜像集群，仲裁队列，都可以提供主从备份功能，主节点宕机，从节点会自动切换为主，数据依然在&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;消息投递给消费者后，如果消费者处理不当，也可能导致消息丢失
    &lt;ul&gt;
      &lt;li&gt;SpringAMQP基于RabbitMQ提供了消费者确认机制、消费者重试机制，消费者失败处理策略：
        &lt;ul&gt;
          &lt;li&gt;消费者的确认机制：
            &lt;ul&gt;
              &lt;li&gt;消费者处理消息成功，未出现异常时，Spring返回ACK给RabbitMQ，消息才被移除&lt;/li&gt;
              &lt;li&gt;消费者处理消息失败，抛出异常，宕机，Spring返回NACK或者不返回结果，消息不被异常&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;消费者重试机制：
            &lt;ul&gt;
              &lt;li&gt;默认情况下，消费者处理失败时，消息会再次回到MQ队列，然后投递给其它消费者。Spring提供的消费者重试机制，则是在处理失败后不返回NACK，而是直接在消费者本地重试。多次重试都失败后，则按照消费者失败处理策略来处理消息。避免了消息频繁入队带来的额外压力。&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;消费者失败策略：
            &lt;ul&gt;
              &lt;li&gt;当消费者多次本地重试失败时，消息默认会丢弃。&lt;/li&gt;
              &lt;li&gt;Spring提供了Republish策略，在多次重试都失败，耗尽重试次数后，将消息重新投递给指定的异常交换机，并且会携带上异常栈信息，帮助定位问题。&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;23rabbitmq如何避免消息堆积&quot;&gt;2.3.RabbitMQ如何避免消息堆积？&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;话术：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;消息堆积问题产生的原因往往是因为消息发送的速度超过了消费者消息处理的速度。因此解决方案无外乎以下三点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;提高消费者处理速度&lt;/li&gt;
  &lt;li&gt;增加更多消费者&lt;/li&gt;
  &lt;li&gt;增加队列消息存储上限&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;1）提高消费者处理速度&lt;/p&gt;

&lt;p&gt;消费者处理速度是由业务代码决定的，所以我们能做的事情包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;尽可能优化业务代码，提高业务性能&lt;/li&gt;
  &lt;li&gt;接收到消息后，开启线程池，并发处理多个消息&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;优点：成本低，改改代码即可&lt;/p&gt;

&lt;p&gt;缺点：开启线程池会带来额外的性能开销，对于高频、低时延的任务不合适。推荐任务执行周期较长的业务。&lt;/p&gt;

&lt;p&gt;2）增加更多消费者&lt;/p&gt;

&lt;p&gt;一个队列绑定多个消费者，共同争抢任务，自然可以提供消息处理的速度。&lt;/p&gt;

&lt;p&gt;优点：能用钱解决的问题都不是问题。实现简单粗暴&lt;/p&gt;

&lt;p&gt;缺点：问题是没有钱。成本太高&lt;/p&gt;

&lt;p&gt;3）增加队列消息存储上限&lt;/p&gt;

&lt;p&gt;在RabbitMQ的1.8版本后，加入了新的队列模式：Lazy Queue&lt;/p&gt;

&lt;p&gt;这种队列不会将消息保存在内存中，而是在收到消息后直接写入磁盘中，理论上没有存储上限。可以解决消息堆积问题。&lt;/p&gt;

&lt;p&gt;优点：磁盘存储更安全；存储无上限；避免内存存储带来的Page Out问题，性能更稳定；&lt;/p&gt;

&lt;p&gt;缺点：磁盘存储受到IO性能的限制，消息时效性不如内存模式，但影响不大。&lt;/p&gt;

&lt;h2 id=&quot;24rabbitmq如何保证消息的有序性&quot;&gt;2.4.RabbitMQ如何保证消息的有序性？&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;话术：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;其实RabbitMQ是队列存储，天然具备先进先出的特点，只要消息的发送是有序的，那么理论上接收也是有序的。不过当一个队列绑定了多个消费者时，可能出现消息轮询投递给消费者的情况，而消费者的处理顺序就无法保证了。&lt;/p&gt;

&lt;p&gt;因此，要保证消息的有序性，需要做的下面几点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;保证消息发送的有序性&lt;/li&gt;
  &lt;li&gt;保证一组有序的消息都发送到同一个队列&lt;/li&gt;
  &lt;li&gt;保证一个队列只包含一个消费者&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;25如何防止mq消息被重复消费&quot;&gt;2.5.如何防止MQ消息被重复消费？&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;话术：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;消息重复消费的原因多种多样，不可避免。所以只能从消费者端入手，只要能保证消息处理的幂等性就可以确保消息不被重复消费。&lt;/p&gt;

&lt;p&gt;而幂等性的保证又有很多方案：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;给每一条消息都添加一个唯一id，在本地记录消息表及消息状态，处理消息时基于数据库表的id唯一性做判断&lt;/li&gt;
  &lt;li&gt;同样是记录消息表，利用消息状态字段实现基于乐观锁的判断，保证幂等&lt;/li&gt;
  &lt;li&gt;基于业务本身的幂等性。比如根据id的删除、查询业务天生幂等；新增、修改等业务可以考虑基于数据库id唯一性、或者乐观锁机制确保幂等。本质与消息表方案类似。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;26如何保证rabbitmq的高可用&quot;&gt;2.6.如何保证RabbitMQ的高可用？&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;话术：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;要实现RabbitMQ的高可用无外乎下面两点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;做好交换机、队列、消息的持久化&lt;/li&gt;
  &lt;li&gt;搭建RabbitMQ的镜像集群，做好主从备份。当然也可以使用仲裁队列代替镜像集群。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;27使用mq可以解决那些问题&quot;&gt;2.7.使用MQ可以解决那些问题？&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;话术：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;RabbitMQ能解决的问题很多，例如：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;解耦合：将几个业务关联的微服务调用修改为基于MQ的异步通知，可以解除微服务之间的业务耦合。同时还提高了业务性能。&lt;/li&gt;
  &lt;li&gt;流量削峰：将突发的业务请求放入MQ中，作为缓冲区。后端的业务根据自己的处理能力从MQ中获取消息，逐个处理任务。流量曲线变的平滑很多&lt;/li&gt;
  &lt;li&gt;延迟队列：基于RabbitMQ的死信队列或者DelayExchange插件，可以实现消息发送后，延迟接收的效果。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;3redis篇&quot;&gt;3.Redis篇&lt;/h1&gt;

&lt;h2 id=&quot;31redis与memcache的区别&quot;&gt;3.1.Redis与Memcache的区别？&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redis支持更丰富的数据类型&lt;/code&gt;（支持更复杂的应用场景）：Redis不仅仅支持简单的k/v类型的数据，同时还提供list，set，zset，hash等数据结构的存储。memcache支持简单的数据类型，String。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Redis支持数据的持久化&lt;/code&gt;，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用,而Memecache把数据全部存在内存之中。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;集群模式&lt;/code&gt;：memcached没有原生的集群模式，需要依靠客户端来实现往集群中分片写入数据；但是 redis 目前是原生支持 cluster 模式的.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Redis使用单线程&lt;/code&gt;：Memcached是多线程，非阻塞IO复用的网络模型；Redis使用单线程的多路 IO 复用模型。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/wfwms/1574821356723.png&quot; alt=&quot;1574821356723&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;32redis的单线程问题&quot;&gt;3.2.Redis的单线程问题&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;面试官&lt;/strong&gt;：Redis采用单线程，如何保证高并发？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;面试话术&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;Redis快的主要原因是：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;完全基于内存&lt;/li&gt;
  &lt;li&gt;数据结构简单，对数据操作也简单&lt;/li&gt;
  &lt;li&gt;使用多路 I/O 复用模型，充分利用CPU资源&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;面试官&lt;/strong&gt;：这样做的好处是什么？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;面试话术&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;单线程优势有下面几点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;代码更清晰，处理逻辑更简单&lt;/li&gt;
  &lt;li&gt;不用去考虑各种锁的问题，不存在加锁释放锁操作，没有因为锁而导致的性能消耗&lt;/li&gt;
  &lt;li&gt;不存在多进程或者多线程导致的CPU切换，充分利用CPU资源&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;32redis的持久化方案由哪些&quot;&gt;3.2.Redis的持久化方案由哪些？&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;相关资料：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1）RDB 持久化&lt;/p&gt;

&lt;p&gt;RDB持久化可以使用save或bgsave，为了不阻塞主进程业务，一般都使用bgsave，流程：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Redis 进程会 fork 出一个子进程（与父进程内存数据一致）。&lt;/li&gt;
  &lt;li&gt;父进程继续处理客户端请求命令&lt;/li&gt;
  &lt;li&gt;由子进程将内存中的所有数据写入到一个临时的 RDB 文件中。&lt;/li&gt;
  &lt;li&gt;完成写入操作之后，旧的 RDB 文件会被新的 RDB 文件替换掉。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面是一些和 RDB 持久化相关的配置：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;save 60 10000&lt;/code&gt;：如果在 60 秒内有 10000 个 key 发生改变，那就执行 RDB 持久化。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stop-writes-on-bgsave-error yes&lt;/code&gt;：如果 Redis 执行 RDB 持久化失败（常见于操作系统内存不足），那么 Redis 将不再接受 client 写入数据的请求。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rdbcompression yes&lt;/code&gt;：当生成 RDB 文件时，同时进行压缩。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dbfilename dump.rdb&lt;/code&gt;：将 RDB 文件命名为 dump.rdb。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dir /var/lib/redis&lt;/code&gt;：将 RDB 文件保存在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var/lib/redis&lt;/code&gt;目录下。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;　　当然在实践中，我们通常会将&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stop-writes-on-bgsave-error&lt;/code&gt;设置为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt;，同时让监控系统在 Redis 执行 RDB 持久化失败时发送告警，以便人工介入解决，而不是粗暴地拒绝 client 的写入请求。&lt;/p&gt;

&lt;p&gt;RDB持久化的优点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;RDB持久化文件小，Redis数据恢复时速度快&lt;/li&gt;
  &lt;li&gt;子进程不影响父进程，父进程可以持续处理客户端命令&lt;/li&gt;
  &lt;li&gt;子进程fork时采用copy-on-write方式，大多数情况下，没有太多的内存消耗，效率比较好。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;RDB 持久化的缺点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;子进程fork时采用copy-on-write方式，如果Redis此时写操作较多，可能导致额外的内存占用，甚至内存溢出&lt;/li&gt;
  &lt;li&gt;RDB文件压缩会减小文件体积，但通过时会对CPU有额外的消耗&lt;/li&gt;
  &lt;li&gt;如果业务场景很看重数据的持久性 (durability)，那么不应该采用 RDB 持久化。譬如说，如果 Redis 每 5 分钟执行一次 RDB 持久化，要是 Redis 意外奔溃了，那么最多会丢失 5 分钟的数据。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2）AOF 持久化&lt;/p&gt;

&lt;p&gt;　　可以使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;appendonly yes&lt;/code&gt;配置项来开启 AOF 持久化。Redis 执行 AOF 持久化时，会将接收到的写命令追加到 AOF 文件的末尾，因此 Redis 只要对 AOF 文件中的命令进行回放，就可以将数据库还原到原先的状态。
　　与 RDB 持久化相比，AOF 持久化的一个明显优势就是，它可以提高数据的持久性 (durability)。因为在 AOF 模式下，Redis 每次接收到 client 的写命令，就会将命令&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;write()&lt;/code&gt;到 AOF 文件末尾。
　　然而，在 Linux 中，将数据&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;write()&lt;/code&gt;到文件后，数据并不会立即刷新到磁盘，而会先暂存在 OS 的文件系统缓冲区。在合适的时机，OS 才会将缓冲区的数据刷新到磁盘（如果需要将文件内容刷新到磁盘，可以调用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fsync()&lt;/code&gt;或&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fdatasync()&lt;/code&gt;）。
　　通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;appendfsync&lt;/code&gt;配置项，可以控制 Redis 将命令同步到磁盘的频率：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;always&lt;/code&gt;：每次 Redis 将命令&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;write()&lt;/code&gt;到 AOF 文件时，都会调用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fsync()&lt;/code&gt;，将命令刷新到磁盘。这可以保证最好的数据持久性，但却会给系统带来极大的开销。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;no&lt;/code&gt;：Redis 只将命令&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;write()&lt;/code&gt;到 AOF 文件。这会让 OS 决定何时将命令刷新到磁盘。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;everysec&lt;/code&gt;：除了将命令&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;write()&lt;/code&gt;到 AOF 文件，Redis 还会每秒执行一次&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fsync()&lt;/code&gt;。在实践中，推荐使用这种设置，一定程度上可以保证数据持久性，又不会明显降低 Redis 性能。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;　　然而，AOF 持久化并不是没有缺点的：Redis 会不断将接收到的写命令追加到 AOF 文件中，导致 AOF 文件越来越大。过大的 AOF 文件会消耗磁盘空间，并且导致 Redis 重启时更加缓慢。为了解决这个问题，在适当情况下，Redis 会对 AOF 文件进行重写，去除文件中冗余的命令，以减小 AOF 文件的体积。在重写 AOF 文件期间， Redis 会启动一个子进程，由子进程负责对 AOF 文件进行重写。
　　可以通过下面两个配置项，控制 Redis 重写 AOF 文件的频率：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;auto-aof-rewrite-min-size 64mb&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;auto-aof-rewrite-percentage 100&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;　　上面两个配置的作用：当 AOF 文件的体积大于 64MB，并且 AOF 文件的体积比上一次重写之后的体积大了至少一倍，那么 Redis 就会执行 AOF 重写。&lt;/p&gt;

&lt;p&gt;优点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;持久化频率高，数据可靠性高&lt;/li&gt;
  &lt;li&gt;没有额外的内存或CPU消耗&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;缺点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;文件体积大&lt;/li&gt;
  &lt;li&gt;文件大导致服务数据恢复时效率较低&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;面试话术：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Redis 提供了两种数据持久化的方式，一种是 RDB，另一种是 AOF。默认情况下，Redis 使用的是 RDB 持久化。&lt;/p&gt;

&lt;p&gt;RDB持久化文件体积较小，但是保存数据的频率一般较低，可靠性差，容易丢失数据。另外RDB写数据时会采用Fork函数拷贝主进程，可能有额外的内存消耗，文件压缩也会有额外的CPU消耗。&lt;/p&gt;

&lt;p&gt;ROF持久化可以做到每秒钟持久化一次，可靠性高。但是持久化文件体积较大，导致数据恢复时读取文件时间较长，效率略低&lt;/p&gt;

&lt;h2 id=&quot;33redis的集群方式有哪些&quot;&gt;3.3.Redis的集群方式有哪些？&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;面试话术：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Redis集群可以分为&lt;strong&gt;主从集群&lt;/strong&gt;和&lt;strong&gt;分片集群&lt;/strong&gt;两类。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;主从集群&lt;/strong&gt;一般一主多从，主库用来写数据，从库用来读数据。结合哨兵，可以再主库宕机时从新选主，&lt;strong&gt;目的是保证Redis的高可用&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;分片集群&lt;/strong&gt;是数据分片，我们会让多个Redis节点组成集群，并将16383个插槽分到不同的节点上。存储数据时利用对key做hash运算，得到插槽值后存储到对应的节点即可。因为存储数据面向的是插槽而非节点本身，因此可以做到集群动态伸缩。&lt;strong&gt;目的是让Redis能存储更多数据。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1）主从集群&lt;/p&gt;

&lt;p&gt;主从集群，也是读写分离集群。一般都是一主多从方式。&lt;/p&gt;

&lt;p&gt;Redis 的复制（replication）功能允许用户根据一个 Redis 服务器来创建任意多个该服务器的复制品，其中被复制的服务器为主服务器（master），而通过复制创建出来的服务器复制品则为从服务器（slave）。&lt;/p&gt;

&lt;p&gt;只要主从服务器之间的网络连接正常，主从服务器两者会具有相同的数据，主服务器就会一直将发生在自己身上的数据更新同步 给从服务器，从而一直保证主从服务器的数据相同。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;写数据时只能通过主节点完成&lt;/li&gt;
  &lt;li&gt;读数据可以从任何节点完成&lt;/li&gt;
  &lt;li&gt;如果配置了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;哨兵节点&lt;/code&gt;，当master宕机时，哨兵会从salve节点选出一个新的主。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;主从集群分两种：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/wfwms/1574821993599.png&quot; alt=&quot;1574821993599&quot; /&gt; &lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/wfwms/1574822026037.png&quot; alt=&quot;1574822026037&quot; /&gt;&lt;/p&gt;

&lt;p&gt;带有哨兵的集群：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/wfwms/1574822077190.png&quot; alt=&quot;1574822077190&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2）分片集群&lt;/p&gt;

&lt;p&gt;主从集群中，每个节点都要保存所有信息，容易形成木桶效应。并且当数据量较大时，单个机器无法满足需求。此时我们就要使用分片集群了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/wfwms/1574822184467.png&quot; alt=&quot;1574822184467&quot; /&gt;&lt;/p&gt;

&lt;p&gt;集群特征：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;每个节点都保存不同数据&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;所有的redis节点彼此互联(PING-PONG机制),内部使用二进制协议优化传输速度和带宽.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;节点的fail是通过集群中超过半数的节点检测失效时才生效.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;客户端与redis节点直连,不需要中间proxy层连接集群中任何一个可用节点都可以访问到数据&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;redis-cluster把所有的物理节点映射到[0-16383]slot（插槽）上，实现动态伸缩&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;为了保证Redis中每个节点的高可用，我们还可以给每个节点创建replication（slave节点），如图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/wfwms/1574822584357.png&quot; alt=&quot;1574822584357&quot; /&gt;&lt;/p&gt;

&lt;p&gt;出现故障时，主从可以及时切换：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/wfwms/1574822602109.png&quot; alt=&quot;1574822602109&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;34redis的常用数据类型有哪些&quot;&gt;3.4.Redis的常用数据类型有哪些？&lt;/h2&gt;

&lt;p&gt;支持多种类型的数据结构，主要区别是value存储的数据格式不同：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;string：最基本的数据类型，二进制安全的字符串，最大512M。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;list：按照添加顺序保持顺序的字符串列表。&lt;/li&gt;
  &lt;li&gt;set：无序的字符串集合，不存在重复的元素。&lt;/li&gt;
  &lt;li&gt;sorted set：已排序的字符串集合。&lt;/li&gt;
  &lt;li&gt;hash：key-value对格式&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;35聊一下redis事务机制&quot;&gt;3.5.聊一下Redis事务机制&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;相关资料：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;参考：http://redisdoc.com/topic/transaction.html&lt;/p&gt;

&lt;p&gt;Redis事务功能是通过MULTI、EXEC、DISCARD和WATCH 四个原语实现的。Redis会将一个事务中的所有命令序列化，然后按顺序执行。但是Redis事务不支持回滚操作，命令运行出错后，正确的命令会继续执行。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MULTI&lt;/code&gt;: 用于开启一个事务，它总是返回OK。 MULTI执行之后，客户端可以继续向服务器发送任意多条命令，这些命令不会立即被执行，而是被放到一个&lt;strong&gt;待执行命令队列&lt;/strong&gt;中&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EXEC&lt;/code&gt;：按顺序执行命令队列内的所有命令。返回所有命令的返回值。事务执行过程中，Redis不会执行其它事务的命令。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DISCARD&lt;/code&gt;：清空命令队列，并放弃执行事务， 并且客户端会从事务状态中退出&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WATCH&lt;/code&gt;：Redis的乐观锁机制，利用compare-and-set（CAS）原理，可以监控一个或多个键，一旦其中有一个键被修改，之后的事务就不会执行&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使用事务时可能会遇上以下两种错误：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;执行 EXEC 之前，入队的命令可能会出错。比如说，命令可能会产生语法错误（参数数量错误，参数名错误，等等），或者其他更严重的错误，比如内存不足（如果服务器使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;maxmemory&lt;/code&gt; 设置了最大内存限制的话）。
    &lt;ul&gt;
      &lt;li&gt;Redis 2.6.5 开始，服务器会对命令入队失败的情况进行记录，并在客户端调用 EXEC 命令时，拒绝执行并自动放弃这个事务。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;命令可能在 EXEC 调用之后失败。举个例子，事务中的命令可能处理了错误类型的键，比如将列表命令用在了字符串键上面，诸如此类。
    &lt;ul&gt;
      &lt;li&gt;即使事务中有某个/某些命令在执行时产生了错误， 事务中的其他命令仍然会继续执行，不会回滚。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;为什么 Redis 不支持回滚（roll back）？&lt;/p&gt;

&lt;p&gt;以下是这种做法的优点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Redis 命令只会因为错误的语法而失败（并且这些问题不能在入队时发现），或是命令用在了错误类型的键上面：这也就是说，从实用性的角度来说，失败的命令是由&lt;strong&gt;编程错误&lt;/strong&gt;造成的，而这些错误应该在开发的过程中被发现，而不应该出现在生产环境中。&lt;/li&gt;
  &lt;li&gt;因为不需要对回滚进行支持，所以 Redis 的内部可以保持简单且快速。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;鉴于没有任何机制能避免程序员自己造成的错误， 并且这类错误通常不会在生产环境中出现， 所以 Redis 选择了更简单、更快速的无回滚方式来处理事务。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;面试话术：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Redis事务其实是把一系列Redis命令放入队列，然后批量执行，执行过程中不会有其它事务来打断。不过与关系型数据库的事务不同，Redis事务不支持回滚操作，事务中某个命令执行失败，其它命令依然会执行。&lt;/p&gt;

&lt;p&gt;为了弥补不能回滚的问题，Redis会在事务入队时就检查命令，如果命令异常则会放弃整个事务。&lt;/p&gt;

&lt;p&gt;因此，只要程序员编程是正确的，理论上说Redis会正确执行所有事务，无需回滚。&lt;/p&gt;

&lt;p&gt;面试官：如果事务执行一半的时候Redis宕机怎么办？&lt;/p&gt;

&lt;p&gt;Redis有持久化机制，因为可靠性问题，我们一般使用AOF持久化。事务的所有命令也会写入AOF文件，但是如果在执行EXEC命令之前，Redis已经宕机，则AOF文件中事务不完整。使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redis-check-aof&lt;/code&gt; 程序可以移除 AOF 文件中不完整事务的信息，确保服务器可以顺利启动。&lt;/p&gt;

&lt;h2 id=&quot;36redis的key过期策略&quot;&gt;3.6.Redis的Key过期策略&lt;/h2&gt;

&lt;h3 id=&quot;参考资料&quot;&gt;&lt;strong&gt;参考资料：&lt;/strong&gt;&lt;/h3&gt;

&lt;h4 id=&quot;为什么需要内存回收&quot;&gt;为什么需要内存回收？&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;1、在Redis中，set指令可以指定key的过期时间，当过期时间到达以后，key就失效了；&lt;/li&gt;
  &lt;li&gt;2、Redis是基于内存操作的，所有的数据都是保存在内存中，一台机器的内存是有限且很宝贵的。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;基于以上两点，为了保证Redis能继续提供可靠的服务，Redis需要一种机制清理掉不常用的、无效的、多余的数据，失效后的数据需要及时清理，这就需要内存回收了。&lt;/p&gt;

&lt;p&gt;Redis的内存回收主要分为过期删除策略和内存淘汰策略两部分。&lt;/p&gt;

&lt;h4 id=&quot;过期删除策略&quot;&gt;过期删除策略&lt;/h4&gt;

&lt;p&gt;删除达到过期时间的key。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1）定时删除&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对于每一个设置了过期时间的key都会创建一个定时器，一旦到达过期时间就立即删除。该策略可以立即清除过期的数据，对内存较友好，但是缺点是占用了大量的CPU资源去处理过期的数据，会影响Redis的吞吐量和响应时间。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;2）惰性删除&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当访问一个key时，才判断该key是否过期，过期则删除。该策略能最大限度地节省CPU资源，但是对内存却十分不友好。有一种极端的情况是可能出现大量的过期key没有被再次访问，因此不会被清除，导致占用了大量的内存。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;在计算机科学中，懒惰删除（英文：lazy deletion）指的是从一个散列表（也称哈希表）中删除元素的一种方法。在这个方法中，删除仅仅是指标记一个元素被删除，而不是整个清除它。被删除的位点在插入时被当作空元素，在搜索之时被当作已占据。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;3）定期删除&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;每隔一段时间，扫描Redis中过期key字典，并清除部分过期的key。该策略是前两者的一个折中方案，还可以通过调整定时扫描的时间间隔和每次扫描的限定耗时，在不同情况下使得CPU和内存资源达到最优的平衡效果。&lt;/p&gt;

&lt;p&gt;在Redis中，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;同时使用了定期删除和惰性删除&lt;/code&gt;。不过Redis定期删除采用的是随机抽取的方式删除部分Key，因此不能保证过期key 100%的删除。&lt;/p&gt;

&lt;p&gt;Redis结合了定期删除和惰性删除，基本上能很好的处理过期数据的清理，但是实际上还是有点问题的，如果过期key较多，定期删除漏掉了一部分，而且也没有及时去查，即没有走惰性删除，那么就会有大量的过期key堆积在内存中，导致redis内存耗尽，当内存耗尽之后，有新的key到来会发生什么事呢？是直接抛弃还是其他措施呢？有什么办法可以接受更多的key？&lt;/p&gt;

&lt;h4 id=&quot;内存淘汰策略&quot;&gt;内存淘汰策略&lt;/h4&gt;

&lt;p&gt;Redis的内存淘汰策略，是指内存达到maxmemory极限时，使用某种算法来决定清理掉哪些数据，以保证新数据的存入。&lt;/p&gt;

&lt;p&gt;Redis的内存淘汰机制包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;noeviction: 当内存不足以容纳新写入数据时，新写入操作会报错。&lt;/li&gt;
  &lt;li&gt;allkeys-lru：当内存不足以容纳新写入数据时，在键空间（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;server.db[i].dict&lt;/code&gt;）中，移除最近最少使用的 key（这个是最常用的）。&lt;/li&gt;
  &lt;li&gt;allkeys-random：当内存不足以容纳新写入数据时，在键空间（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;server.db[i].dict&lt;/code&gt;）中，随机移除某个 key。&lt;/li&gt;
  &lt;li&gt;volatile-lru：当内存不足以容纳新写入数据时，在设置了过期时间的键空间（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;server.db[i].expires&lt;/code&gt;）中，移除最近最少使用的 key。&lt;/li&gt;
  &lt;li&gt;volatile-random：当内存不足以容纳新写入数据时，在设置了过期时间的键空间（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;server.db[i].expires&lt;/code&gt;）中，随机移除某个 key。&lt;/li&gt;
  &lt;li&gt;volatile-ttl：当内存不足以容纳新写入数据时，在设置了过期时间的键空间（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;server.db[i].expires&lt;/code&gt;）中，有更早过期时间的 key 优先移除。&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;在配置文件中，通过maxmemory-policy可以配置要使用哪一个淘汰机制。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;什么时候会进行淘汰？&lt;/p&gt;

&lt;p&gt;Redis会在每一次处理命令的时候（processCommand函数调用freeMemoryIfNeeded）判断当前redis是否达到了内存的最大限制，如果达到限制，则使用对应的算法去处理需要删除的key。&lt;/p&gt;

&lt;p&gt;在淘汰key时，Redis默认最常用的是LRU算法（Latest Recently Used）。Redis通过在每一个redisObject保存lru属性来保存key最近的访问时间，在实现LRU算法时直接读取key的lru属性。&lt;/p&gt;

&lt;p&gt;具体实现时，Redis遍历每一个db，从每一个db中随机抽取一批样本key，默认是3个key，再从这3个key中，删除最近最少使用的key。&lt;/p&gt;

&lt;h3 id=&quot;面试话术&quot;&gt;面试话术：&lt;/h3&gt;

&lt;p&gt;Redis过期策略包含定期删除和惰性删除两部分。定期删除是在Redis内部有一个定时任务，会定期删除一些过期的key。惰性删除是当用户查询某个Key时，会检查这个Key是否已经过期，如果没过期则返回用户，如果过期则删除。&lt;/p&gt;

&lt;p&gt;但是这两个策略都无法保证过期key一定删除，漏网之鱼越来越多，还可能导致内存溢出。当发生内存不足问题时，Redis还会做内存回收。内存回收采用LRU策略，就是最近最少使用。其原理就是记录每个Key的最近使用时间，内存回收时，随机抽取一些Key，比较其使用时间，把最老的几个删除。&lt;/p&gt;

&lt;p&gt;Redis的逻辑是：最近使用过的，很可能再次被使用&lt;/p&gt;

&lt;h2 id=&quot;37redis在项目中的哪些地方有用到&quot;&gt;3.7.Redis在项目中的哪些地方有用到?&lt;/h2&gt;

&lt;p&gt;（1）共享session&lt;/p&gt;

&lt;p&gt;在分布式系统下，服务会部署在不同的tomcat，因此多个tomcat的session无法共享，以前存储在session中的数据无法实现共享，可以用redis代替session，解决分布式系统间数据共享问题。&lt;/p&gt;

&lt;p&gt;（2）数据缓存&lt;/p&gt;

&lt;p&gt;Redis采用内存存储，读写效率较高。我们可以把数据库的访问频率高的热点数据存储到redis中，这样用户请求时优先从redis中读取，减少数据库压力，提高并发能力。&lt;/p&gt;

&lt;p&gt;（3）异步队列&lt;/p&gt;

&lt;p&gt;Reids在内存存储引擎领域的一大优点是提供 list 和 set 操作，这使得Redis能作为一个很好的消息队列平台来使用。而且Redis中还有pub/sub这样的专用结构，用于1对N的消息通信模式。&lt;/p&gt;

&lt;p&gt;（4）分布式锁&lt;/p&gt;

&lt;p&gt;Redis中的乐观锁机制，可以帮助我们实现分布式锁的效果，用于解决分布式系统下的多线程安全问题&lt;/p&gt;

&lt;h2 id=&quot;38redis的缓存击穿缓存雪崩缓存穿透&quot;&gt;3.8.Redis的缓存击穿、缓存雪崩、缓存穿透&lt;/h2&gt;

&lt;h3 id=&quot;1缓存穿透&quot;&gt;1）缓存穿透&lt;/h3&gt;

&lt;p&gt;参考资料：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;什么是缓存穿透
    &lt;ul&gt;
      &lt;li&gt;正常情况下，我们去查询数据都是存在。那么请求去查询一条压根儿数据库中根本就不存在的数据，也就是缓存和数据库都查询不到这条数据，但是请求每次都会打到数据库上面去。这种查询不存在数据的现象我们称为&lt;strong&gt;缓存穿透&lt;/strong&gt;。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;穿透带来的问题
    &lt;ul&gt;
      &lt;li&gt;试想一下，如果有黑客会对你的系统进行攻击，拿一个不存在的id 去查询数据，会产生大量的请求到数据库去查询。可能会导致你的数据库由于压力过大而宕掉。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;解决办法
    &lt;ul&gt;
      &lt;li&gt;缓存空值：之所以会发生穿透，就是因为缓存中没有存储这些空数据的key。从而导致每次查询都到数据库去了。那么我们就可以为这些key对应的值设置为null 丢到缓存里面去。后面再出现查询这个key 的请求的时候，直接返回null 。这样，就不用在到数据库中去走一圈了，但是别忘了设置过期时间。&lt;/li&gt;
      &lt;li&gt;BloomFilter（布隆过滤）：将所有可能存在的数据哈希到一个足够大的bitmap中，一个一定不存在的数据会被 这个bitmap拦截掉，从而避免了对底层存储系统的查询压力。在缓存之前在加一层 BloomFilter ，在查询的时候先去 BloomFilter 去查询 key 是否存在，如果不存在就直接返回，存在再走查缓存 -&amp;gt; 查 DB。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;话术：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;缓存穿透有两种解决方案：&lt;strong&gt;其一&lt;/strong&gt;是把不存在的key设置null值到缓存中。&lt;strong&gt;其二&lt;/strong&gt;是使用布隆过滤器，在查询缓存前先通过布隆过滤器判断key是否存在，存在再去查询缓存。&lt;/p&gt;

&lt;p&gt;设置null值可能被恶意针对，攻击者使用大量不存在的不重复key ，那么方案一就会缓存大量不存在key数据。此时我们还可以对Key规定格式模板，然后对不存在的key做&lt;strong&gt;正则规范&lt;/strong&gt;匹配，如果完全不符合就不用存null值到redis，而是直接返回错误。&lt;/p&gt;

&lt;h3 id=&quot;2缓存击穿&quot;&gt;2）缓存击穿&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;相关资料&lt;/strong&gt;：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;什么是缓存击穿？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;key可能会在某些时间点被超高并发地访问，是一种非常“热点”的数据。这个时候，需要考虑一个问题：缓存被“击穿”的问题。&lt;/p&gt;

&lt;p&gt;当这个key在失效的瞬间，redis查询失败，持续的大并发就穿破缓存，直接请求数据库，就像在一个屏障上凿开了一个洞。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;解决方案：
    &lt;ul&gt;
      &lt;li&gt;使用互斥锁(mutex key)：mutex，就是互斥。简单地来说，就是在缓存失效的时候（判断拿出来的值为空），不是立即去load db，而是先使用Redis的SETNX去set一个互斥key，当操作返回成功时，再进行load db的操作并回设缓存；否则，就重试整个get缓存的方法。SETNX，是「SET if Not eXists」的缩写，也就是只有不存在的时候才设置，可以利用它来实现互斥的效果。&lt;/li&gt;
      &lt;li&gt;软过期：也就是逻辑过期，不使用redis提供的过期时间，而是业务层在数据中存储过期时间信息。查询时由业务程序判断是否过期，如果数据即将过期时，将缓存的时效延长，程序可以派遣一个线程去数据库中获取最新的数据，其他线程这时看到延长了的过期时间，就会继续使用旧数据，等派遣的线程获取最新数据后再更新缓存。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;推荐使用互斥锁，因为软过期会有业务逻辑侵入和额外的判断。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;面试话术&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;缓存击穿主要担心的是某个Key过期，更新缓存时引起对数据库的突发高并发访问。因此我们可以在更新缓存时采用互斥锁控制，只允许一个线程去更新缓存，其它线程等待并重新读取缓存。例如Redis的setnx命令就能实现互斥效果。&lt;/p&gt;

&lt;h3 id=&quot;3缓存雪崩&quot;&gt;3）缓存雪崩&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;相关资料&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;缓存雪崩，是指在某一个时间段，缓存集中过期失效。对这批数据的访问查询，都落到了数据库上，对于数据库而言，就会产生周期性的压力波峰。&lt;/p&gt;

&lt;p&gt;解决方案：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;数据分类分批处理：采取不同分类数据，缓存不同周期&lt;/li&gt;
  &lt;li&gt;相同分类数据：采用固定时长加随机数方式设置缓存&lt;/li&gt;
  &lt;li&gt;热点数据缓存时间长一些，冷门数据缓存时间短一些&lt;/li&gt;
  &lt;li&gt;避免redis节点宕机引起雪崩，搭建主从集群，保证高可用&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;面试话术：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;解决缓存雪崩问题的关键是让缓存Key的过期时间分散。因此我们可以把数据按照业务分类，然后设置不同过期时间。相同业务类型的key，设置固定时长加随机数。尽可能保证每个Key的过期时间都不相同。&lt;/p&gt;

&lt;p&gt;另外，Redis宕机也可能导致缓存雪崩，因此我们还要搭建Redis主从集群及哨兵监控，保证Redis的高可用。&lt;/p&gt;

&lt;h2 id=&quot;39缓存冷热数据分离&quot;&gt;3.9.缓存冷热数据分离&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;背景资料&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;Redis使用的是内存存储，当需要海量数据存储时，成本非常高。&lt;/p&gt;

&lt;p&gt;经过调研发现，当前主流DDR3内存和主流SATA SSD的单位成本价格差距大概在20倍左右，为了优化redis机器综合成本，我们考虑实现基于&lt;strong&gt;热度统计 的数据分级存储&lt;/strong&gt;及数据在RAM/FLASH之间的动态交换，从而大幅度降低成本，达到性能与成本的高平衡。&lt;/p&gt;

&lt;p&gt;基本思路：基于key访问次数(LFU)的热度统计算法识别出热点数据，并将热点数据保留在redis中，对于无访问/访问次数少的数据则转存到SSD上，如果SSD上的key再次变热，则重新将其加载到redis内存中。&lt;/p&gt;

&lt;p&gt;目前流行的高性能磁盘存储，并且遵循Redis协议的方案包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SSDB：http://ssdb.io/zh_cn/&lt;/li&gt;
  &lt;li&gt;RocksDB：https://rocksdb.org.cn/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因此，我们就需要在应用程序与缓存服务之间引入代理，实现Redis和SSD之间的切换，如图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/wfwms/image-20200521115702956.png&quot; alt=&quot;image-20200521115702956&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这样的代理方案阿里云提供的就有。当然也有一些开源方案，例如：https://github.com/JingchengLi/swapdb&lt;/p&gt;

&lt;h2 id=&quot;310redis实现分布式锁&quot;&gt;3.10.Redis实现分布式锁&lt;/h2&gt;

&lt;p&gt;分布式锁要满足的条件：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;多进程互斥：同一时刻，只有一个进程可以获取锁&lt;/li&gt;
  &lt;li&gt;保证锁可以释放：任务结束或出现异常，锁一定要释放，避免死锁&lt;/li&gt;
  &lt;li&gt;阻塞锁（可选）：获取锁失败时可否重试&lt;/li&gt;
  &lt;li&gt;重入锁（可选）：获取锁的代码递归调用时，依然可以获取锁&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;1最基本的分布式锁&quot;&gt;1）最基本的分布式锁：&lt;/h3&gt;

&lt;p&gt;利用Redis的setnx命令，这个命令的特征时如果多次执行，只有第一次执行会成功，可以实现&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;互斥&lt;/code&gt;的效果。但是为了保证服务宕机时也可以释放锁，需要利用expire命令给锁设置一个有效期&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;setnx lock thread-01 # 尝试获取锁
expire lock 10 # 设置有效期
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;面试官问题1&lt;/strong&gt;：如果expire之前服务宕机怎么办？&lt;/p&gt;

&lt;p&gt;要保证setnx和expire命令的原子性。redis的set命令可以满足：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;set key value [NX] [EX time] 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;需要添加nx和ex的选项：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;NX：与setnx一致，第一次执行成功&lt;/li&gt;
  &lt;li&gt;EX：设置过期时间&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;面试官问题2&lt;/strong&gt;：释放锁的时候，如果自己的锁已经过期了，此时会出现安全漏洞，如何解决？&lt;/p&gt;

&lt;p&gt;在锁中存储当前进程和线程标识，释放锁时对锁的标识判断，如果是自己的则删除，不是则放弃操作。&lt;/p&gt;

&lt;p&gt;但是这两步操作要保证原子性，需要通过Lua脚本来实现。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if redis.call(&quot;get&quot;,KEYS[1]) == ARGV[1] then
    redis.call(&quot;del&quot;,KEYS[1])
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;2可重入分布式锁&quot;&gt;2）可重入分布式锁&lt;/h3&gt;

&lt;p&gt;如果有重入的需求，则除了在锁中记录进程标识，还要记录重试次数，流程如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/zhangjinmiao/zhangjinmiao.github.io/raw/master/images/blog/2022/wfwms/1574824172228.png&quot; alt=&quot;1574824172228&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下面我们假设锁的key为“&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lock&lt;/code&gt;”，hashKey是当前线程的id：“&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;threadId&lt;/code&gt;”，锁自动释放时间假设为20&lt;/p&gt;

&lt;p&gt;获取锁的步骤：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1、判断lock是否存在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EXISTS lock&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;存在，说明有人获取锁了，下面判断是不是自己的锁
        &lt;ul&gt;
          &lt;li&gt;判断当前线程id作为hashKey是否存在：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HEXISTS lock threadId&lt;/code&gt;
            &lt;ul&gt;
              &lt;li&gt;不存在，说明锁已经有了，且不是自己获取的，锁获取失败，end&lt;/li&gt;
              &lt;li&gt;存在，说明是自己获取的锁，重入次数+1：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HINCRBY lock threadId 1&lt;/code&gt;，去到步骤3&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;2、不存在，说明可以获取锁，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HSET key threadId 1&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;3、设置锁自动释放时间，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EXPIRE lock 20&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;释放锁的步骤：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1、判断当前线程id作为hashKey是否存在：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HEXISTS lock threadId&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;不存在，说明锁已经失效，不用管了&lt;/li&gt;
      &lt;li&gt;存在，说明锁还在，重入次数减1：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HINCRBY lock threadId -1&lt;/code&gt;，获取新的重入次数&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;2、判断重入次数是否为0：
    &lt;ul&gt;
      &lt;li&gt;为0，说明锁全部释放，删除key：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DEL lock&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;大于0，说明锁还在使用，重置有效时间：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EXPIRE lock 20&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对应的Lua脚本如下：&lt;/p&gt;

&lt;p&gt;首先是获取锁：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KEYS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 锁的key&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threadId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ARGV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 线程唯一标识&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;releaseTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ARGV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 锁的自动释放时间&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'exists'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 判断是否存在&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hset'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threadId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 不存在, 获取锁&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'expire'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;releaseTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 设置有效期&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 返回结果&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hexists'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threadId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 锁已经存在，判断threadId是否是自己	&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hincrby'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threadId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 不存在, 获取锁，重入次数+1&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'expire'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;releaseTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 设置有效期&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 返回结果&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 代码走到这里,说明获取锁的不是自己，获取锁失败&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后是释放锁：&lt;/p&gt;

&lt;div class=&quot;language-lua highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KEYS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 锁的key&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threadId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ARGV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 线程唯一标识&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;releaseTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ARGV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 锁的自动释放时间&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'HEXISTS'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threadId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 判断当前锁是否还是被自己持有&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 如果已经不是自己，则直接返回&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'HINCRBY'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threadId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 是自己的锁，则重入次数-1&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 判断是否重入次数是否已经为0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'EXPIRE'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;releaseTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 大于0说明不能释放锁，重置有效期然后返回&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'DEL'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;-- 等于0说明可以释放锁，直接删除&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;3高可用的锁&quot;&gt;3）高可用的锁&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;面试官问题&lt;/code&gt;：redis分布式锁依赖与redis，如果redis宕机则锁失效。如何解决？&lt;/p&gt;

&lt;p&gt;此时大多数同学会回答说：搭建主从集群，做数据备份。&lt;/p&gt;

&lt;p&gt;这样就进入了陷阱，因为面试官的下一个问题就来了：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;面试官问题&lt;/code&gt;：如果搭建主从集群做数据备份时，进程A获取锁，master还没有把数据备份到slave，master宕机，slave升级为master，此时原来锁失效，其它进程也可以获取锁，出现安全问题。如何解决？&lt;/p&gt;

&lt;p&gt;关于这个问题，Redis官网给出了解决方案，使用RedLock思路可以解决：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;在Redis的分布式环境中，我们假设有N个Redis master。这些节点完全互相独立，不存在主从复制或者其他集群协调机制。之前我们已经描述了在Redis单实例下怎么安全地获取和释放锁。我们确保将在每（N)个实例上使用此方法获取和释放锁。在这个样例中，我们假设有5个Redis master节点，这是一个比较合理的设置，所以我们需要在5台机器上面或者5台虚拟机上面运行这些实例，这样保证他们不会同时都宕掉。&lt;/p&gt;

  &lt;p&gt;为了取到锁，客户端应该执行以下操作:&lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;获取当前Unix时间，以毫秒为单位。&lt;/li&gt;
    &lt;li&gt;依次尝试从N个实例，使用相同的key和随机值获取锁。在步骤2，当向Redis设置锁时,客户端应该设置一个网络连接和响应超时时间，这个超时时间应该小于锁的失效时间。例如你的锁自动失效时间为10秒，则超时时间应该在5-50毫秒之间。这样可以避免服务器端Redis已经挂掉的情况下，客户端还在死死地等待响应结果。如果服务器端没有在规定时间内响应，客户端应该尽快尝试另外一个Redis实例。&lt;/li&gt;
    &lt;li&gt;客户端使用当前时间减去开始获取锁时间（步骤1记录的时间）就得到获取锁使用的时间。当且仅当从大多数（这里是3个节点）的Redis节点都取到锁，并且使用的时间小于锁失效时间时，锁才算获取成功。&lt;/li&gt;
    &lt;li&gt;如果取到了锁，key的真正有效时间等于有效时间减去获取锁所使用的时间（步骤3计算的结果）。&lt;/li&gt;
    &lt;li&gt;如果因为某些原因，获取锁失败（&lt;em&gt;没有&lt;/em&gt;在至少N/2+1个Redis实例取到锁或者取锁时间已经超过了有效时间），客户端应该在所有的Redis实例上进行解锁（即便某些Redis实例根本就没有加锁成功）。&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;311如何实现数据库与缓存数据一致&quot;&gt;3.11.如何实现数据库与缓存数据一致？&lt;/h2&gt;

&lt;p&gt;面试话术：&lt;/p&gt;

&lt;p&gt;实现方案有下面几种：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;本地缓存同步：当前微服务的数据库数据与缓存数据同步，可以直接在数据库修改时加入对Redis的修改逻辑，保证一致。&lt;/li&gt;
  &lt;li&gt;跨服务缓存同步：服务A调用了服务B，并对查询结果缓存。服务B数据库修改，可以通过MQ通知服务A，服务A修改Redis缓存数据&lt;/li&gt;
  &lt;li&gt;通用方案：使用Canal框架，伪装成MySQL的salve节点，监听MySQL的binLog变化，然后修改Redis缓存数据&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Zhang jinmiao</name></author><category term="microservice" /><summary type="html">1.微服务篇</summary></entry><entry><title type="html">Docker 学习</title><link href="http://zhangjinmiao.github.io/docker/2020/06/16/docker.html" rel="alternate" type="text/html" title="Docker 学习" /><published>2020-06-16T00:00:00+08:00</published><updated>2020-06-16T00:00:00+08:00</updated><id>http://zhangjinmiao.github.io/docker/2020/06/16/docker</id><content type="html" xml:base="http://zhangjinmiao.github.io/docker/2020/06/16/docker.html">&lt;h2 id=&quot;docker-介绍&quot;&gt;Docker 介绍&lt;/h2&gt;
&lt;h3 id=&quot;什么是-docker&quot;&gt;什么是 Docker&lt;/h3&gt;
&lt;p&gt;Docker 使用 Google 公司推出的 Go 语言 进行开发实现，基于 Linux 内核的 cgroup，namespace，以及 OverlayFS 类的 Union FS 等技术，对进程进行封装隔离，属于 操作系统层面的虚拟化技术。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。最初实现是基于 LXC，从 0.7 版本以后开始去除 LXC，转而使用自行开发的 libcontainer，从 1.11 开始，则进一步演进为使用 runC 和 containerd。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Docker 架构：&lt;/strong&gt;
&lt;img src=&quot;https://docs.microsoft.com/en-us/virtualization/windowscontainers/deploy-containers/media/docker-on-linux.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;runc&lt;/code&gt; 是一个 Linux 命令行工具，用于根据 &lt;a href=&quot;https://github.com/opencontainers/runtime-spec&quot;&gt;OCI容器运行时规范&lt;/a&gt; 创建和运行容器。&lt;/p&gt;

  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;containerd&lt;/code&gt; 是一个守护程序，它管理容器生命周期，提供了在一个节点上执行容器和管理镜像的最小功能集。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Docker&lt;/strong&gt; 和传统虚拟化方式的比较：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;传统虚拟机技术&lt;/strong&gt;是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;容器&lt;/strong&gt;内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟，比传统虚拟机更为轻便。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://gblobscdn.gitbook.com/assets%2F-M5xTVjmK7ax94c8ZQcm%2F-M5xT_hHX2g5ldlyp9nm%2F-M5xTdXNYDmRWNH-Lqez%2Fvirtualization.png?alt=media&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://gblobscdn.gitbook.com/assets%2F-M5xTVjmK7ax94c8ZQcm%2F-M5xT_hHX2g5ldlyp9nm%2F-M5xTdXP2scg0hxytUHA%2Fdocker.png?alt=media&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;为什么要用-docker&quot;&gt;为什么要用 Docker&lt;/h3&gt;

&lt;p&gt;1：更高效的利用系统资源&lt;/p&gt;

&lt;p&gt;2：更快速的启动时间&lt;/p&gt;

&lt;p&gt;3：一致的运行环境&lt;/p&gt;

&lt;p&gt;4：持续交付和部署&lt;/p&gt;

&lt;p&gt;5：更轻松的迁移&lt;/p&gt;

&lt;p&gt;6：更轻松的维护和扩展&lt;/p&gt;

&lt;h3 id=&quot;对比传统虚拟机总结&quot;&gt;对比传统虚拟机总结&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;特性&lt;/th&gt;
      &lt;th&gt;启动&lt;/th&gt;
      &lt;th&gt;硬盘使用&lt;/th&gt;
      &lt;th&gt;性能&lt;/th&gt;
      &lt;th&gt;系统支持量&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;容器&lt;/td&gt;
      &lt;td&gt;秒级&lt;/td&gt;
      &lt;td&gt;一般为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MB&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;接近原生&lt;/td&gt;
      &lt;td&gt;单机支持上千个容器&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;虚拟机&lt;/td&gt;
      &lt;td&gt;分钟级&lt;/td&gt;
      &lt;td&gt;一般为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GB&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;若于&lt;/td&gt;
      &lt;td&gt;一般几十个&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;参考：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://yeasy.gitbook.io/docker_practice/introduction&quot;&gt;Docker 简介&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;docker-安装&quot;&gt;Docker 安装&lt;/h2&gt;

&lt;h2 id=&quot;docker-命令&quot;&gt;Docker 命令&lt;/h2&gt;

&lt;h3 id=&quot;基础命令&quot;&gt;基础命令&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;命令&lt;/th&gt;
      &lt;th&gt;命令描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;info&lt;/td&gt;
      &lt;td&gt;显示 Docker 详细的系统信息&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;version&lt;/td&gt;
      &lt;td&gt;显示 docker 客户端和服务端版本信息&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;inspect&lt;/td&gt;
      &lt;td&gt;查看容器或镜像的配置信息, 默认为 json 数据&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;events&lt;/td&gt;
      &lt;td&gt;实时打印服务端执行的事件&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;镜像命令&quot;&gt;镜像命令&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;命令&lt;/th&gt;
      &lt;th&gt;命令描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;images&lt;/td&gt;
      &lt;td&gt;查看本地镜像（列出本地所有镜像）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;inspect&lt;/td&gt;
      &lt;td&gt;查看镜像详情&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;search&lt;/td&gt;
      &lt;td&gt;查找镜像&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;tag&lt;/td&gt;
      &lt;td&gt;修改镜像 tag&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;history&lt;/td&gt;
      &lt;td&gt;显示镜像每层的变更内容&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;rmi&lt;/td&gt;
      &lt;td&gt;删除本地镜像&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;pull&lt;/td&gt;
      &lt;td&gt;获取镜像&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;push&lt;/td&gt;
      &lt;td&gt;推送镜像到仓库&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;login&lt;/td&gt;
      &lt;td&gt;登录第三方仓库&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;logout&lt;/td&gt;
      &lt;td&gt;退出第三方仓库&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;save&lt;/td&gt;
      &lt;td&gt;打包本地镜像, 使用压缩包来完成迁移&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;load&lt;/td&gt;
      &lt;td&gt;导入镜像压缩包&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;commit&lt;/td&gt;
      &lt;td&gt;将容器保存为镜像&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;build&lt;/td&gt;
      &lt;td&gt;使用 Dockerfile 构建镜像&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;import&lt;/td&gt;
      &lt;td&gt;导入本地容器快照文件为镜像&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;容器命令&quot;&gt;容器命令&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;命令&lt;/th&gt;
      &lt;th&gt;命令描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;create&lt;/td&gt;
      &lt;td&gt;根据镜像生成一个新的容器&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;start&lt;/td&gt;
      &lt;td&gt;启动一个新的容器&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;run&lt;/td&gt;
      &lt;td&gt;创建、启动容器并执行相应的命令&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;rename&lt;/td&gt;
      &lt;td&gt;重命名容器名&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ps&lt;/td&gt;
      &lt;td&gt;查看运行中的容器&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;top&lt;/td&gt;
      &lt;td&gt;显示容器的运行进程&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;stop&lt;/td&gt;
      &lt;td&gt;关闭容器&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;kill&lt;/td&gt;
      &lt;td&gt;强制关闭容器&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;restart&lt;/td&gt;
      &lt;td&gt;重启容器&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;pause&lt;/td&gt;
      &lt;td&gt;暂停容器&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;unpause&lt;/td&gt;
      &lt;td&gt;恢复暂停的容器&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;exec&lt;/td&gt;
      &lt;td&gt;在已运行的容器中执行命令&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;attach&lt;/td&gt;
      &lt;td&gt;进入运行中的容器, 显示该容器的控制台界面。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;logs&lt;/td&gt;
      &lt;td&gt;打印容器的控制台输出内容&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;port&lt;/td&gt;
      &lt;td&gt;容器端口映射列表&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;rm&lt;/td&gt;
      &lt;td&gt;删除已停止的容器&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;diff&lt;/td&gt;
      &lt;td&gt;展示容器相对于构建它的镜像内容所做的改变&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;export&lt;/td&gt;
      &lt;td&gt;导出容器到本地快照文件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;cp&lt;/td&gt;
      &lt;td&gt;在容器和宿主机之间复制文件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;wait&lt;/td&gt;
      &lt;td&gt;阻塞当前命令直到对应的容器被关闭, 容器关闭后打印结束代码&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;资源命令&quot;&gt;资源命令&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;命令&lt;/th&gt;
      &lt;th&gt;命令描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;stats&lt;/td&gt;
      &lt;td&gt;显示容器硬件资源使用情况&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;update&lt;/td&gt;
      &lt;td&gt;更新容器的硬件资源限制&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;system&lt;/td&gt;
      &lt;td&gt;管理系统资源&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;参考：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://docs.docker.com/engine/reference/commandline/docker/&quot;&gt;官方命令&lt;/a&gt;
&lt;a href=&quot;https://www.jianshu.com/p/7c9e2247cfbd&quot;&gt;Docker 常用指令详解&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;docker-镜像&quot;&gt;Docker 镜像&lt;/h2&gt;

&lt;h2 id=&quot;网络&quot;&gt;网络&lt;/h2&gt;

&lt;h2 id=&quot;存储&quot;&gt;存储&lt;/h2&gt;

&lt;h2 id=&quot;7docker-compose&quot;&gt;7.Docker Compose&lt;/h2&gt;

&lt;p&gt;Docker Compose 的文档：&lt;/p&gt;

&lt;p&gt;https://docs.docker.com/compose/overview/&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;相关文档资料&lt;/strong&gt;：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/&quot;&gt;官网&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://skyao.io/learning-docker&quot;&gt;敖小剑 Docker 学习笔记&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://yeasy.gitbook.io/docker_practice/&quot;&gt;Docker–从入门到实践&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;</content><author><name>Zhang jinmiao</name></author><category term="Docker" /><summary type="html">Docker 介绍 什么是 Docker Docker 使用 Google 公司推出的 Go 语言 进行开发实现，基于 Linux 内核的 cgroup，namespace，以及 OverlayFS 类的 Union FS 等技术，对进程进行封装隔离，属于 操作系统层面的虚拟化技术。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。最初实现是基于 LXC，从 0.7 版本以后开始去除 LXC，转而使用自行开发的 libcontainer，从 1.11 开始，则进一步演进为使用 runC 和 containerd。</summary></entry><entry><title type="html">分布式配置中心——Apollo</title><link href="http://zhangjinmiao.github.io/java/2020/04/22/apollo.html" rel="alternate" type="text/html" title="分布式配置中心——Apollo" /><published>2020-04-22T00:00:00+08:00</published><updated>2020-04-22T00:00:00+08:00</updated><id>http://zhangjinmiao.github.io/java/2020/04/22/apollo</id><content type="html" xml:base="http://zhangjinmiao.github.io/java/2020/04/22/apollo.html">&lt;h2 id=&quot;1概述&quot;&gt;1.概述&lt;/h2&gt;

&lt;h3 id=&quot;官方介绍&quot;&gt;官方介绍&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Apollo（阿波罗）是携程框架部门研发的分布式配置中心，能够集中化管理应用不同环境、不同集群的配置，配置修改后能够实时推送到应用端，并且具备规范的权限、流程治理等特性，适用于微服务配置管理场景。&lt;/p&gt;

  &lt;p&gt;服务端基于 Spring Boot 和 Spring Cloud 开发，打包后可以直接运行，不需要额外安装 Tomcat 等应用容器。&lt;/p&gt;

  &lt;p&gt;Java 客户端不依赖任何框架，能够运行于所有 Java 运行时环境，同时对 Spring/Spring Boot 环境也有额外支持。&lt;/p&gt;

  &lt;p&gt;.Net 客户端不依赖任何框架，能够运行于所有 .Net 运行时环境。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;核心功能&quot;&gt;核心功能&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;统一管理不同环境、不同集群的配置&lt;/li&gt;
  &lt;li&gt;配置修改实时生效（热发布）&lt;/li&gt;
  &lt;li&gt;版本发布管理&lt;/li&gt;
  &lt;li&gt;灰度发布&lt;/li&gt;
  &lt;li&gt;权限管理、发布审核、操作审计&lt;/li&gt;
  &lt;li&gt;客户端配置信息监控&lt;/li&gt;
  &lt;li&gt;提供 Java 和 .Net 原生客户端&lt;/li&gt;
  &lt;li&gt;提供开放平台 API&lt;/li&gt;
  &lt;li&gt;部署简单&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;详细的功能说明，请访问 &lt;a href=&quot;https://github.com/ctripcorp/apollo/wiki#features&quot;&gt;《Apollo 功能列表》&lt;/a&gt; 。&lt;/p&gt;

&lt;h2 id=&quot;2apollo架构设计之服务器端&quot;&gt;2.Apollo架构设计之服务器端&lt;/h2&gt;

&lt;h3 id=&quot;官方架构图&quot;&gt;官方架构图&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlgy1ge2u1g369pj31cd0u0wkz.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;模块介绍&quot;&gt;模块介绍&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlgy1ge2u3cqb95j31ry0s8guc.jpg&quot; alt=&quot;模块1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlgy1ge2u43f9tgj31o00rijz3.jpg&quot; alt=&quot;模块2&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;架构图二&quot;&gt;架构图二&lt;/h3&gt;

&lt;p&gt;针对官方给出的架构图做了下拆分，便于理解。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlgy1ge2uheg7kdj31l70u0af2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;领域模型&quot;&gt;领域模型&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlgy1ge2u99kncqj317t0u077b.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;权限模型&quot;&gt;权限模型&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlgy1ge2ub7gjhjj31ab0u0add.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;实时推送设计&quot;&gt;实时推送设计&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlgy1ge2ucit6apj31ni0qqgom.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;release-message-设计&quot;&gt;Release Message 设计&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlgy1ge2udl3wi0j311i0tc76f.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;3apollo架构设计之客户端&quot;&gt;3.Apollo架构设计之客户端&lt;/h2&gt;

&lt;h3 id=&quot;客户端架构图&quot;&gt;客户端架构图&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlgy1ge2ueh32l9j31j60qqwix.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;客户端实现总结&quot;&gt;客户端实现总结&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlgy1ge2ufu6l6oj31d00tuqa4.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;4apollo架构设计之高可用和监控&quot;&gt;4.Apollo架构设计之高可用和监控&lt;/h2&gt;

&lt;h3 id=&quot;ha-高可用设计&quot;&gt;HA 高可用设计&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlgy1ge2wge672yj31kj0u0dpp.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;ha-图例&quot;&gt;HA 图例&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlgy1ge2who8x0gj31jr0u0tdu.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;监控&quot;&gt;监控&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dianping/cat&quot;&gt;CAT&lt;/a&gt;：实时监控告警服务中间件&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlgy1ge2wk26eaaj31ik0u0110.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;5分布式部署指南&quot;&gt;5.分布式部署指南&lt;/h2&gt;

&lt;p&gt;参考：&lt;a href=&quot;https://github.com/ctripcorp/apollo/wiki/分布式部署指南&quot;&gt;分布式部署指南&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;先决条件&quot;&gt;先决条件&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlgy1ge3hbajm3pj318c0t6q6h.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;部署案例&quot;&gt;部署案例&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlgy1ge3hbwoxucj31mg0u0k39.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;部署图例&quot;&gt;部署图例&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlgy1ge3hcjkqb5j31le0u0q83.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;配置注意点&quot;&gt;配置注意点&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/007S8ZIlgy1ge3hdt3z7cj31pq0qsdme.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;6java客户端使用&quot;&gt;6.Java客户端使用&lt;/h2&gt;

&lt;p&gt;参考：&lt;a href=&quot;https://github.com/ctripcorp/apollo/wiki/Java客户端使用指南&quot;&gt;Java客户端使用指南&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;apollo-client和spring集成xml方式&quot;&gt;&lt;strong&gt;Apollo Client和Spring集成~XML方式&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;参考：&lt;a href=&quot;https://github.com/geektime-geekbang/apollo_lab/blob/master/lab03/README.md&quot;&gt;lab03&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;apollo-client和spring集成代码方式&quot;&gt;&lt;strong&gt;Apollo Client和Spring集成~&lt;/strong&gt;代码&lt;strong&gt;方式&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;参考：&lt;a href=&quot;https://github.com/geektime-geekbang/apollo_lab/blob/master/lab04/README.md&quot;&gt;lab04&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;apollo-client和spring-boot集成&quot;&gt;&lt;strong&gt;Apollo Client和Spring Boot集成&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;参考：&lt;a href=&quot;https://github.com/geektime-geekbang/apollo_lab/blob/master/lab05/README.md&quot;&gt;lab05&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;apollo开放平台接入实操&quot;&gt;Apollo开放平台接入实操&lt;/h3&gt;

&lt;p&gt;参考：&lt;a href=&quot;https://github.com/geektime-geekbang/apollo_lab/blob/master/lab06/README.md&quot;&gt;lab06&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;相关文档资料&lt;/strong&gt;：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;https://github.com/ctripcorp/apollo&quot;&gt;官方gitHub&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://github.com/ctripcorp/apollo/wiki/Apollo配置中心介绍&quot;&gt;Apollo配置中心介绍&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://github.com/ctripcorp/apollo/wiki/Quick-Start&quot;&gt;本地快速部署Quick Start&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://github.com/ctripcorp/apollo/wiki/Apollo使用指南&quot;&gt;应用接入指南&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://github.com/ctripcorp/apollo/wiki/Java客户端使用指南&quot;&gt;Java客户端使用指南&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://github.com/ctripcorp/apollo-use-cases&quot;&gt;Apollo使用场景和示例代码&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://github.com/ctripcorp/apollo/wiki/Apollo-实践案例&quot;&gt;Apollo实践案例&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://www.infoq.cn/article/ctrip-apollo-configuration-center-architecture&quot;&gt;杨波——携程 Apollo 配置中心架构深度剖析&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://www.iocoder.cn/categories/Apollo/&quot;&gt;Apollo源码解析&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;</content><author><name>Zhang jinmiao</name></author><category term="Java" /><summary type="html">1.概述</summary></entry><entry><title type="html">Mac 下 IDEA 快捷键</title><link href="http://zhangjinmiao.github.io/tools/2019/12/15/Idea-shortcut-use-mac.html" rel="alternate" type="text/html" title="Mac 下 IDEA 快捷键" /><published>2019-12-15T00:00:00+08:00</published><updated>2019-12-15T00:00:00+08:00</updated><id>http://zhangjinmiao.github.io/tools/2019/12/15/Idea%20shortcut%20use%20mac</id><content type="html" xml:base="http://zhangjinmiao.github.io/tools/2019/12/15/Idea-shortcut-use-mac.html">&lt;h2 id=&quot;intellij-idea-for-mac-快捷键&quot;&gt;IntelliJ IDEA For Mac 快捷键&lt;/h2&gt;

&lt;p&gt;alt+f7 查找变量方法使用的地方&lt;/p&gt;

&lt;p&gt;F3 添加书签&lt;/p&gt;

&lt;p&gt;Ctrl + O 快捷覆写方法&lt;/p&gt;

&lt;p&gt;Alt + F3 添加书签标识&lt;/p&gt;

&lt;p&gt;command + F3 显示书签&lt;/p&gt;

&lt;p&gt;command + Shift + A 查找动作&lt;/p&gt;

&lt;p&gt;Alt + F1 快捷选择&lt;/p&gt;

&lt;p&gt;command+alt+f7 这个是查找选中的字符在工程中出现的地方，可以不是方法变量类等，这个和上面的有区别的&lt;/p&gt;

&lt;p&gt;command＋F7 可以查询当前元素在当前文件中的引用，然后按 F3 可以选择，功能基本同上选中文本，按 command+shift+F7 ，高亮显示所有该文本，按 Esc 高亮消失。选中文本，按 Alt+F3 ，逐个往下查找相同文本，并高亮显示。shift+f3 就是往上找&lt;/p&gt;

&lt;p&gt;ctrl+enter 出现生成 get,set 方法的界面&lt;/p&gt;

&lt;p&gt;shift+enter 换到下一行&lt;/p&gt;

&lt;p&gt;command+R 替换&lt;/p&gt;

&lt;p&gt;command+shift+R 可以在整个工程或着某个目录下面替换变量&lt;/p&gt;

&lt;p&gt;command+control+R 运行当前工程&lt;/p&gt;

&lt;p&gt;command+Y 查看选中当前源码&lt;/p&gt;

&lt;p&gt;command+D 复制一行&lt;/p&gt;

&lt;p&gt;command+delete 删除一行&lt;/p&gt;

&lt;p&gt;control+shift+J 把多行连接成一行，会去掉空格的行&lt;/p&gt;

&lt;p&gt;command+J 可以生成一些自动代码，比如 for 循环&lt;/p&gt;

&lt;p&gt;command+B 找变量的来源  同 F4   查找变量来源&lt;/p&gt;

&lt;p&gt;control+shift+B 找变量所属的类&lt;/p&gt;

&lt;p&gt;command+G 查找变量并且定位&lt;/p&gt;

&lt;p&gt;command+shift+F  可以在整个工程或着某个目录下面查找变量   相当于 eclipse 里的 ctrl+H&lt;/p&gt;

&lt;p&gt;alt+shift+C 最近修改的文件&lt;/p&gt;

&lt;p&gt;command+E 最近打开的文件&lt;/p&gt;

&lt;p&gt;alt+enter 导入包，自动修改&lt;/p&gt;

&lt;p&gt;command+alt+L 格式化代码&lt;/p&gt;

&lt;p&gt;command+alt+I 自动缩进，不用多次使用 tab 或着&lt;/p&gt;

&lt;p&gt;backspace 键，也是比较方便的&lt;/p&gt;

&lt;p&gt;command+shift+enter 代码补全，这个会判断可能用到的，这个代码补全和代码提示是不一样的&lt;/p&gt;

&lt;p&gt;command+P 方法参数提示&lt;/p&gt;

&lt;p&gt;command+alt+T 把选中的代码放在 TRY{} IF{} ELSE{} 里&lt;/p&gt;

&lt;p&gt;command+X 剪切&lt;/p&gt;

&lt;p&gt;command+shift+V 可以复制多个文本&lt;/p&gt;

&lt;p&gt;command+shift+U 大小写转换&lt;/p&gt;

&lt;p&gt;command+/ 注释一行或着多行 //&lt;/p&gt;

&lt;p&gt;command+alt+/ 注释/&lt;em&gt;…&lt;/em&gt;/&lt;/p&gt;

&lt;p&gt;command+alt+左右箭头 返回上次编辑的位置&lt;/p&gt;

&lt;p&gt;command+左右箭头 返回最左边最右边&lt;/p&gt;

&lt;p&gt;shift+f6 重命名&lt;/p&gt;

&lt;p&gt;command+shift+上下箭头 把代码上移或着下移&lt;/p&gt;

&lt;p&gt;command+[或]  可以跳到大括号的开头结尾&lt;/p&gt;

&lt;p&gt;command+f12 可以显示当前文件的结构&lt;/p&gt;

&lt;p&gt;command+alt+B 可以导航到一个抽象方法的实现代码&lt;/p&gt;

&lt;p&gt;command+, 呼出偏好设置&lt;/p&gt;

&lt;h2 id=&quot;mac-键盘符号和修饰键说明&quot;&gt;Mac 键盘符号和修饰键说明&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;⌘ Command&lt;/li&gt;
  &lt;li&gt;⇧ Shift&lt;/li&gt;
  &lt;li&gt;⌥ Option&lt;/li&gt;
  &lt;li&gt;⌃ Control&lt;/li&gt;
  &lt;li&gt;↩︎ Return/Enter&lt;/li&gt;
  &lt;li&gt;⌫ Delete&lt;/li&gt;
  &lt;li&gt;⌦ 向前删除键（Fn+Delete）&lt;/li&gt;
  &lt;li&gt;↑ 上箭头&lt;/li&gt;
  &lt;li&gt;↓ 下箭头&lt;/li&gt;
  &lt;li&gt;← 左箭头&lt;/li&gt;
  &lt;li&gt;→ 右箭头&lt;/li&gt;
  &lt;li&gt;⇞ Page Up（Fn+↑）&lt;/li&gt;
  &lt;li&gt;⇟ Page Down（Fn+↓）&lt;/li&gt;
  &lt;li&gt;Home Fn + ←&lt;/li&gt;
  &lt;li&gt;End Fn + →&lt;/li&gt;
  &lt;li&gt;⇥ 右制表符（Tab 键）&lt;/li&gt;
  &lt;li&gt;⇤ 左制表符（Shift+Tab）&lt;/li&gt;
  &lt;li&gt;⎋ Escape (Esc)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;editing编辑&quot;&gt;Editing（编辑）&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;⌃Space 基本的代码补全（补全任何类、方法、变量）&lt;/li&gt;
  &lt;li&gt;⌃⇧Space 智能代码补全（过滤器方法列表和变量的预期类型）&lt;/li&gt;
  &lt;li&gt;⌘⇧↩ 自动结束代码，行末自动添加分号&lt;/li&gt;
  &lt;li&gt;⌘P 显示方法的参数信息&lt;/li&gt;
  &lt;li&gt;⌃J, Mid. button click 快速查看文档&lt;/li&gt;
  &lt;li&gt;⇧F1 查看外部文档（在某些代码上会触发打开浏览器显示相关文档）&lt;/li&gt;
  &lt;li&gt;⌘+鼠标放在代码上 显示代码简要信息&lt;/li&gt;
  &lt;li&gt;⌘F1 在错误或警告处显示具体描述信息&lt;/li&gt;
  &lt;li&gt;⌘N, ⌃↩, ⌃N 生成代码（getter、setter、构造函数、hashCode/equals,toString）&lt;/li&gt;
  &lt;li&gt;⌃O 覆盖方法（重写父类方法）&lt;/li&gt;
  &lt;li&gt;⌃I 实现方法（实现接口中的方法）&lt;/li&gt;
  &lt;li&gt;⌘⌥T 包围代码（使用 if..else, try..catch, for, synchronized 等包围选中的代码）&lt;/li&gt;
  &lt;li&gt;⌘/ 注释/取消注释与行注释&lt;/li&gt;
  &lt;li&gt;⌘⌥/ 注释/取消注释与块注释&lt;/li&gt;
  &lt;li&gt;⌥↑ 连续选中代码块&lt;/li&gt;
  &lt;li&gt;⌥↓ 减少当前选中的代码块&lt;/li&gt;
  &lt;li&gt;⌃⇧Q 显示上下文信息&lt;/li&gt;
  &lt;li&gt;⌥↩ 显示意向动作和快速修复代码&lt;/li&gt;
  &lt;li&gt;⌘⌥L 格式化代码&lt;/li&gt;
  &lt;li&gt;⌃⌥O 优化 import&lt;/li&gt;
  &lt;li&gt;⌃⌥I 自动缩进线&lt;/li&gt;
  &lt;li&gt;⇥ / ⇧⇥ 缩进代码 / 反缩进代码&lt;/li&gt;
  &lt;li&gt;⌘X 剪切当前行或选定的块到剪贴板&lt;/li&gt;
  &lt;li&gt;⌘C 复制当前行或选定的块到剪贴板&lt;/li&gt;
  &lt;li&gt;⌘V 从剪贴板粘贴&lt;/li&gt;
  &lt;li&gt;⌘⇧V 从最近的缓冲区粘贴&lt;/li&gt;
  &lt;li&gt;⌘D 复制当前行或选定的块&lt;/li&gt;
  &lt;li&gt;⌘⌫ 删除当前行或选定的块的行&lt;/li&gt;
  &lt;li&gt;⌃⇧J 智能的将代码拼接成一行&lt;/li&gt;
  &lt;li&gt;⌘↩ 智能的拆分拼接的行&lt;/li&gt;
  &lt;li&gt;⇧↩ 开始新的一行&lt;/li&gt;
  &lt;li&gt;⌘⇧U 大小写切换&lt;/li&gt;
  &lt;li&gt;⌘⇧] / ⌘⇧[ 选择直到代码块结束/开始&lt;/li&gt;
  &lt;li&gt;⌥⌦ 删除到单词的末尾（⌦键为 Fn+Delete）&lt;/li&gt;
  &lt;li&gt;⌥⌫ 删除到单词的开头&lt;/li&gt;
  &lt;li&gt;⌘+ / ⌘- 展开 / 折叠代码块&lt;/li&gt;
  &lt;li&gt;⌘⇧+ 展开所以代码块&lt;/li&gt;
  &lt;li&gt;⌘⇧- 折叠所有代码块&lt;/li&gt;
  &lt;li&gt;⌘W 关闭活动的编辑器选项卡&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;searchreplace查询替换&quot;&gt;Search/Replace（查询/替换）&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Double ⇧ 查询任何东西&lt;/li&gt;
  &lt;li&gt;⌘F 文件内查找&lt;/li&gt;
  &lt;li&gt;⌘G 查找模式下，向下查找&lt;/li&gt;
  &lt;li&gt;⌘⇧G 查找模式下，向上查找&lt;/li&gt;
  &lt;li&gt;⌘R 文件内替换&lt;/li&gt;
  &lt;li&gt;⌘⇧F 全局查找（根据路径）&lt;/li&gt;
  &lt;li&gt;⌘⇧R 全局替换（根据路径）&lt;/li&gt;
  &lt;li&gt;⌘⇧S 查询结构（Ultimate Edition 版专用，需要在 Keymap 中设置）&lt;/li&gt;
  &lt;li&gt;⌘⇧M 替换结构（Ultimate Edition 版专用，需要在 Keymap 中设置）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;usage-search使用查询&quot;&gt;Usage Search（使用查询）&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;⌥F7 / ⌘F7 在文件中查找用法 / 在类中查找用法&lt;/li&gt;
  &lt;li&gt;⌘⇧F7 在文件中突出显示的用法&lt;/li&gt;
  &lt;li&gt;⌘⌥F7 显示用法&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;compile-and-run编译和运行&quot;&gt;Compile and Run（编译和运行）&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;⌘F9 编译 Project&lt;/li&gt;
  &lt;li&gt;⌘⇧F9 编译选择的文件、包或模块&lt;/li&gt;
  &lt;li&gt;⌃⌥R 弹出 Run 的可选择菜单&lt;/li&gt;
  &lt;li&gt;⌃⌥D 弹出 Debug 的可选择菜单&lt;/li&gt;
  &lt;li&gt;⌃R 运行&lt;/li&gt;
  &lt;li&gt;⌃D 调试&lt;/li&gt;
  &lt;li&gt;⌃⇧R, ⌃⇧D 从编辑器运行上下文环境配置&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;debugging调试&quot;&gt;Debugging（调试）&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;F8 进入下一步，如果当前行断点是一个方法，则不进入当前方法体内&lt;/li&gt;
  &lt;li&gt;F7 进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中&lt;/li&gt;
  &lt;li&gt;⇧F7 智能步入，断点所在行上有多个方法调用，会弹出进入哪个方法&lt;/li&gt;
  &lt;li&gt;⇧F8 跳出&lt;/li&gt;
  &lt;li&gt;⌥F9 运行到光标处，如果光标前有其他断点会进入到该断点&lt;/li&gt;
  &lt;li&gt;⌥F8 计算表达式（可以更改变量值使其生效）&lt;/li&gt;
  &lt;li&gt;⌘⌥R 恢复程序运行，如果该断点下面代码还有断点则停在下一个断点上&lt;/li&gt;
  &lt;li&gt;⌘F8 切换断点（若光标当前行有断点则取消断点，没有则加上断点）&lt;/li&gt;
  &lt;li&gt;⌘⇧F8 查看断点信息&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;navigation导航&quot;&gt;Navigation（导航）&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;⌘O 查找类文件&lt;/li&gt;
  &lt;li&gt;⌘⇧O 查找所有类型文件、打开文件、打开目录，打开目录需要在输入的内容前面或后面加一个反斜杠/&lt;/li&gt;
  &lt;li&gt;⌘⌥O 前往指定的变量 / 方法&lt;/li&gt;
  &lt;li&gt;⌃← / ⌃→ 左右切换打开的编辑 tab 页&lt;/li&gt;
  &lt;li&gt;F12 返回到前一个工具窗口&lt;/li&gt;
  &lt;li&gt;⎋ 从工具窗口进入代码文件窗口&lt;/li&gt;
  &lt;li&gt;⇧⎋ 隐藏当前或最后一个活动的窗口，且光标进入代码文件窗口&lt;/li&gt;
  &lt;li&gt;⌘⇧F4 关闭活动 run/messages/find/… tab&lt;/li&gt;
  &lt;li&gt;⌘L 在当前文件跳转到某一行的指定处&lt;/li&gt;
  &lt;li&gt;⌘E 显示最近打开的文件记录列表&lt;/li&gt;
  &lt;li&gt;⌘⌥← / ⌘⌥→ 退回 / 前进到上一个操作的地方&lt;/li&gt;
  &lt;li&gt;⌘⇧⌫ 跳转到最后一个编辑的地方&lt;/li&gt;
  &lt;li&gt;⌥F1 显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择(如在代码编辑窗口可以选择显示该文件的 Finder)&lt;/li&gt;
  &lt;li&gt;⌘B / ⌘ 鼠标点击 进入光标所在的方法/变量的接口或是定义处&lt;/li&gt;
  &lt;li&gt;⌘⌥B 跳转到实现处，在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口&lt;/li&gt;
  &lt;li&gt;⌥ Space, ⌘Y 快速打开光标所在方法、类的定义&lt;/li&gt;
  &lt;li&gt;⌃⇧B 跳转到类型声明处&lt;/li&gt;
  &lt;li&gt;⌘U 前往当前光标所在方法的父类的方法 / 接口定义&lt;/li&gt;
  &lt;li&gt;⌃↓ / ⌃↑ 当前光标跳转到当前文件的前一个/后一个方法名位置&lt;/li&gt;
  &lt;li&gt;⌘] / ⌘[ 移动光标到当前所在代码的花括号开始/结束位置&lt;/li&gt;
  &lt;li&gt;⌘F12 弹出当前文件结构层，可以在弹出的层上直接输入进行筛选（可用于搜索类中的方法）&lt;/li&gt;
  &lt;li&gt;⌃H 显示当前类的层次结构&lt;/li&gt;
  &lt;li&gt;⌘⇧H 显示方法层次结构&lt;/li&gt;
  &lt;li&gt;⌃⌥H 显示调用层次结构&lt;/li&gt;
  &lt;li&gt;F2 / ⇧F2 跳转到下一个/上一个突出错误或警告的位置&lt;/li&gt;
  &lt;li&gt;F4 / ⌘↓ 编辑/查看代码源&lt;/li&gt;
  &lt;li&gt;⌥ Home 显示到当前文件的导航条&lt;/li&gt;
  &lt;li&gt;F3 选中文件/文件夹/代码行，添加/取消书签&lt;/li&gt;
  &lt;li&gt;⌥F3 选中文件/文件夹/代码行，使用助记符添加/取消书签&lt;/li&gt;
  &lt;li&gt;⌃0…⌃9 定位到对应数值的书签位置&lt;/li&gt;
  &lt;li&gt;⌘F3 显示所有书签&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;refactoring重构&quot;&gt;Refactoring（重构）&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;F5 复制文件到指定目录&lt;/li&gt;
  &lt;li&gt;F6 移动文件到指定目录&lt;/li&gt;
  &lt;li&gt;⌘⌫ 在文件上为安全删除文件，弹出确认框&lt;/li&gt;
  &lt;li&gt;⇧F6 重命名文件&lt;/li&gt;
  &lt;li&gt;⌘F6 更改签名&lt;/li&gt;
  &lt;li&gt;⌘⌥N 一致性&lt;/li&gt;
  &lt;li&gt;⌘⌥M 将选中的代码提取为方法&lt;/li&gt;
  &lt;li&gt;⌘⌥V 提取变量&lt;/li&gt;
  &lt;li&gt;⌘⌥F 提取字段&lt;/li&gt;
  &lt;li&gt;⌘⌥C 提取常量&lt;/li&gt;
  &lt;li&gt;⌘⌥P 提取参数&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;vcslocal-history版本控制本地历史记录&quot;&gt;VCS/Local History（版本控制/本地历史记录）&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;⌘K 提交代码到版本控制器&lt;/li&gt;
  &lt;li&gt;⌘T 从版本控制器更新代码&lt;/li&gt;
  &lt;li&gt;⌥⇧C 查看最近的变更记录&lt;/li&gt;
  &lt;li&gt;⌃C 快速弹出版本控制器操作面板&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;live-templates动态代码模板&quot;&gt;Live Templates（动态代码模板）&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;⌘⌥J 弹出模板选择窗口，将选定的代码使用动态模板包住&lt;/li&gt;
  &lt;li&gt;⌘J 插入自定义动态代码模板&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;general通用&quot;&gt;General（通用）&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;⌘1…⌘9 打开相应编号的工具窗口&lt;/li&gt;
  &lt;li&gt;⌘S 保存所有&lt;/li&gt;
  &lt;li&gt;⌘⌥Y 同步、刷新&lt;/li&gt;
  &lt;li&gt;⌃⌘F 切换全屏模式&lt;/li&gt;
  &lt;li&gt;⌘⇧F12 切换最大化编辑器&lt;/li&gt;
  &lt;li&gt;⌥⇧F 添加到收藏夹&lt;/li&gt;
  &lt;li&gt;⌥⇧I 检查当前文件与当前的配置文件&lt;/li&gt;
  &lt;li&gt;§⌃, ⌃` 快速切换当前的 scheme（切换主题、代码样式等）&lt;/li&gt;
  &lt;li&gt;⌘, 打开 IDEA 系统设置&lt;/li&gt;
  &lt;li&gt;⌘; 打开项目结构对话框&lt;/li&gt;
  &lt;li&gt;⇧⌘A 查找动作（可设置相关选项）&lt;/li&gt;
  &lt;li&gt;⌃⇥ 编辑窗口标签和工具窗口之间切换（如果在切换的过程加按上 delete，则是关闭对应选中的窗口）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;other一些官方文档上没有体现的快捷键&quot;&gt;Other（一些官方文档上没有体现的快捷键）&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;⌘⇧8 竖编辑模式&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Zhang jinmiao</name></author><category term="Tools" /><summary type="html">IntelliJ IDEA For Mac 快捷键</summary></entry><entry><title type="html">开源数据同步神器——canal</title><link href="http://zhangjinmiao.github.io/canal/2019/10/29/canal.html" rel="alternate" type="text/html" title="开源数据同步神器——canal" /><published>2019-10-29T00:00:00+08:00</published><updated>2019-10-29T00:00:00+08:00</updated><id>http://zhangjinmiao.github.io/canal/2019/10/29/canal</id><content type="html" xml:base="http://zhangjinmiao.github.io/canal/2019/10/29/canal.html">&lt;blockquote&gt;
  &lt;p&gt;本文转自：&lt;a href=&quot;https://www.cnblogs.com/joylee/p/10248106.html&quot;&gt;IT 米粉&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;如今大型的 IT 系统中，都会使用分布式的方式，同时会有非常多的中间件，如 redis、消息队列、大数据存储等，但是实际核心的数据存储依然是存储在数据库，作为使用最广泛的数据库，如何将 mysql 的数据与中间件的数据进行同步，既能确保数据的一致性、及时性，也能做到代码无侵入的方式呢？如果有这样的一个需求，数据修改后，需要及时的将 mysql 中的数据更新到 elasticsearch,我们会怎么进行实现呢？&lt;/p&gt;

&lt;h2 id=&quot;数据同步方案选择&quot;&gt;数据同步方案选择&lt;/h2&gt;
&lt;p&gt;针对上文的需求，经过思考，初步有如下的一些方案：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;代码实现
    &lt;blockquote&gt;
      &lt;p&gt;针对代码中进行数据库的增删改操作时，同时进行 elasticsearch 的增删改操作。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;mybatis 实现
    &lt;blockquote&gt;
      &lt;p&gt;通过 mybatis plugin 进行实现，截取 sql 语句进行分析， 针对 insert、update、delete 的语句进行处理。显然，这些操作如果都是单条数据的操作，是很容易处理的。但是，实际开发中，总是会有一些批量的更新或者删除操作，这时候，就很难进行处理了。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Aop 实现
    &lt;blockquote&gt;
      &lt;p&gt;不管是通过哪种 Aop 方式，根据制定的规则，如规范方法名，注解等进行切面处理，但依然还是会出现无法处理批量操作数据的问题。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;logstash
    &lt;blockquote&gt;
      &lt;p&gt;logstash 类似的同步组件提供的文件和数据同步的功能，可以进行数据的同步，只需要简单的配置就能将 mysql 数据同步到 elasticsearch，但是 logstash 的原理是每秒进行一次增量数据查询，将结果同步到 elasticsearch ，实时性要求特别高的，可能无法满足要求。且此方案的性能不是很好，造成资源的浪费。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;那么是否有什么更好的方式进行处理吗？mysql binlog 同步，实时性强，对于应用无任何侵入性，且性能更好，不会造成资源浪费，那么就有了我今天的主角——canal&lt;/p&gt;

&lt;h2 id=&quot;canal&quot;&gt;canal&lt;/h2&gt;
&lt;h3 id=&quot;介绍&quot;&gt;介绍&lt;/h3&gt;
&lt;p&gt;canal 是阿里巴巴的一个开源项目，基于 java 实现，整体已经在很多大型的互联网项目生产环境中使用，包括阿里、美团等都有广泛的应用，是一个非常成熟的数据库同步方案，基础的使用只需要进行简单的配置即可。 
canal 是通过模拟成为 mysql 的 slave 的方式，监听 mysql 的 binlog 日志来获取数据，binlog 设置为 row 模式以后，不仅能获取到执行的每一个增删改的脚本，同时还能获取到修改前和修改后的数据，基于这个特性，canal 就能高性能的获取到 mysql 数据数据的变更。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNc79gy1fz0rzegysej30ou0bijrk.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;使用&quot;&gt;使用&lt;/h3&gt;
&lt;p&gt;canal 的介绍在官网有非常详细的说明，如果想了解更多，大家可以移步官网（https://github.com/alibaba/canal）了解。我这里补充下使用中不太容易理解部分。
canal 的部署主要分为 server 端和 client 端。
server 端部署好以后，可以直接监听 mysql binlog,因为 server 端是把自己模拟成了 mysql slave，所以，只能接受数据，没有进行任何逻辑的处理，具体的逻辑处理，需要 client 端进行处理。
client 端一般是需要大家进行简单的开发。https://github.com/alibaba/canal/wiki/ClientAPI 有一个简单的示例，很容易理解。&lt;/p&gt;

&lt;h3 id=&quot;canal-adapter&quot;&gt;canal Adapter&lt;/h3&gt;
&lt;p&gt;为了便于大家的使用，官方做了一个独立的组件　Adapter，Adapter　是可以将　canal server　端获取的数据转换成几个常用的中间件数据源，现在支持　kafka、rocketmq、hbase、elasticsearch，针对这几个中间件的支持，直接配置即可，无需开发。上文中，如果需要将　mysql　的数据同步到　elasticsearch，直接运行 canal Adapter，修改相关的配置即可。&lt;/p&gt;

&lt;p&gt;###　常见问题
－　无法接收到数据，程序也没有报错？
一定要确保　mysql　的　binlog　模式为　row　模式，canal　原理是解析　Binlog　文件，并且直接从文件中获取数据的。&lt;/p&gt;

&lt;p&gt;－　Adapter 使用无法同步数据？
按照官方文档，检查配置项，如 sql 的大小写，字段的大小写可能都会有影响，如果还无法搞定，可以自己获取代码调试下，Adapter 的代码还是比较容易看懂的。&lt;/p&gt;

&lt;h3 id=&quot;canal-adapter-elasticsearch-改造&quot;&gt;canal Adapter elasticsearch 改造&lt;/h3&gt;
&lt;p&gt;因为有了 canal 和 canal Adapter 这个神器，同步到 elasticsearch、hbase 等问题都解决了，但是自己的开发的过程中发现，Adapter 使用还是有些问题，因为先使用的是 elasticsearch 同步功能，所以对 elasticsearch 进行了一些改造：&lt;/p&gt;

&lt;p&gt;###　elasticsearch　初始化
一个全新的　elasticsearch　无法使用，因为没有创建　elasticsearch index　和　mapping,增加了对应的功能。&lt;/p&gt;

&lt;p&gt;elasticsearch　配置文件　mapping　节点增加两个参数：&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;enablefieldmap: true
  fieldmap:
    id: &quot;text&quot;
    name: &quot;text&quot;
    c_time: &quot;text&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;enablefieldmap 是否需要自动生成 fieldmap，默认为 false,如果需要启动的时候就生成这设置为 true,并且设置 
fieldmap,类似 elasticsearch mapping 中每个字段的类型。&lt;/p&gt;

&lt;h3 id=&quot;esconfig-bug-处理&quot;&gt;esconfig bug 处理&lt;/h3&gt;
&lt;p&gt;代码中获取 binlog 的日志处理时，必须要获取数据库名，但是当获取 binlog 为 type query 时，是无法获取数据库名的，此处有 bug，导致出现 “Outer adapter write failed” ,且未输出错误日志，修复此 bug.&lt;/p&gt;

&lt;h3 id=&quot;后续计划&quot;&gt;后续计划&lt;/h3&gt;
&lt;p&gt;增加 rabbit MQ 的支持
增加 redis 的支持&lt;/p&gt;

&lt;h3 id=&quot;源码&quot;&gt;源码&lt;/h3&gt;
&lt;p&gt;源码地址：https://github.com/itmifen/canal&lt;/p&gt;</content><author><name>Zhang jinmiao</name></author><category term="Canal" /><summary type="html">本文转自：IT 米粉</summary></entry></feed>